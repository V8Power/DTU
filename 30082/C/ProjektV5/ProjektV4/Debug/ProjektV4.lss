
ProjektV4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000008b2  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000097c  0080020c  0080020c  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001688  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fec  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b20  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081f  00000000  00000000  00003ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066b  00000000  00000000  000046e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e5 c0       	rjmp	.+458    	; 0x21c <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	55 c2       	rjmp	.+1194   	; 0x510 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	6a c0       	rjmp	.+212    	; 0x14a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2b e0       	ldi	r18, 0x0B	; 11
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 38       	cpi	r26, 0x88	; 136
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	9d d0       	rcall	.+314    	; 0x25a <main>
 120:	c6 c3       	rjmp	.+1932   	; 0x8ae <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:

#include <avr/io.h>

void init_ADC(){
	
		ADMUX|=(1<<ADLAR)|(0<<REFS0); // Brug AVcc som reference spændningen, dvs 5 V hvis valgt på pin i arduino
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 83       	st	Z, r24
		ADCSRA|=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2); 
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 6a       	ori	r24, 0xA4	; 164
 136:	80 83       	st	Z, r24
		ADCSRA|= (1<<ADIE)|(1<<ADSC);; // ENABLE interrupt. start sample (start convertion)
 138:	80 81       	ld	r24, Z
 13a:	88 64       	ori	r24, 0x48	; 72
 13c:	80 83       	st	Z, r24
		ADCSRB|=(1<<ADTS2)|(1<<ADTS1); // Timer1 overflow interrupt som trigger source til adc converteren.
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <__vector_29>:
uint16_t sample_rate_raw_tmp = 62500;
uint16_t i=5;
uint8_t length_raw;

ISR(ADC_vect)
{	
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	//static int i=5;
	
	
	if (i<(record_length+5) && (control==0))
 16a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <record_length>
 16e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <record_length+0x1>
 172:	05 96       	adiw	r24, 0x05	; 5
 174:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 178:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	f0 f4       	brcc	.+60     	; 0x1be <__vector_29+0x74>
 182:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <control>
 186:	41 11       	cpse	r20, r1
 188:	1a c0       	rjmp	.+52     	; 0x1be <__vector_29+0x74>
	{
		array_transmit[i++]=ADCH;
 18a:	a9 01       	movw	r20, r18
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 194:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 198:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 19c:	f9 01       	movw	r30, r18
 19e:	ea 5d       	subi	r30, 0xDA	; 218
 1a0:	fd 4f       	sbci	r31, 0xFD	; 253
 1a2:	60 83       	st	Z, r22
		
		if (i==(record_length+5))
 1a4:	84 17       	cp	r24, r20
 1a6:	95 07       	cpc	r25, r21
 1a8:	49 f5       	brne	.+82     	; 0x1fc <__vector_29+0xb2>
		{
			control=1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <control>
			i=5;
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <__vector_29+0xb2>
		}
		
	}

	else if (i<((record_length+5)) && (control==1))
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	e0 f4       	brcc	.+56     	; 0x1fc <__vector_29+0xb2>
 1c4:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <control>
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	c1 f4       	brne	.+48     	; 0x1fc <__vector_29+0xb2>
	{
		array_transmit2[i++]= ADCH;
 1cc:	a9 01       	movw	r20, r18
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 1da:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1de:	f9 01       	movw	r30, r18
 1e0:	e8 52       	subi	r30, 0x28	; 40
 1e2:	f9 4f       	sbci	r31, 0xF9	; 249
 1e4:	60 83       	st	Z, r22
		
			if (i==(record_length+5))
 1e6:	84 17       	cp	r24, r20
 1e8:	95 07       	cpc	r25, r21
 1ea:	41 f4       	brne	.+16     	; 0x1fc <__vector_29+0xb2>
			{
				control=0;
 1ec:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <control>
				i=5;
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			}	

	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_20>:



ISR(TIMER1_OVF_vect) 
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
	
  TCNT1=sample_rate_raw;
 22a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sample_rate_raw>
 22e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sample_rate_raw+0x1>
 232:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 236:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
  timer_count++;
 23a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timer_count>
 23e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <timer_count+0x1>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <timer_count+0x1>
 248:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <timer_count>
  //TCNT1 = 65536 - (250000/samplerate);

}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <main>:

int main(void)
{
	
	
	init_timer();
 25a:	99 d2       	rcall	.+1330   	; 0x78e <init_timer>
	init_ADC();
 25c:	63 df       	rcall	.-314    	; 0x124 <init_ADC>
 25e:	60 e0       	ldi	r22, 0x00	; 0
	//uart_Init(UBRRF);
	uart_Init(115200);
 260:	72 ec       	ldi	r23, 0xC2	; 194
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	a0 d2       	rcall	.+1344   	; 0x7a8 <uart_Init>
	setRecievei();
 268:	cf d2       	rcall	.+1438   	; 0x808 <setRecievei>
	calculateLRC();
	SPI_init_master(0,0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	8e d1       	rcall	.+796    	; 0x58c <SPI_init_master>
 270:	84 b1       	in	r24, 0x04	; 4
	DDRB |= (1 << PB7);
 272:	80 68       	ori	r24, 0x80	; 128
 274:	84 b9       	out	0x04, r24	; 4
 276:	78 94       	sei
	sei();
 278:	e6 e2       	ldi	r30, 0x26	; 38
	
	
	array_transmit[0]=0x55;
 27a:	f2 e0       	ldi	r31, 0x02	; 2
 27c:	25 e5       	ldi	r18, 0x55	; 85
 27e:	20 83       	st	Z, r18
 280:	9a ea       	ldi	r25, 0xAA	; 170
	array_transmit[1]=0xAA;
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	82 e0       	ldi	r24, 0x02	; 2
	array_transmit[4]=0x02;	
 286:	84 83       	std	Z+4, r24	; 0x04
 288:	e8 ed       	ldi	r30, 0xD8	; 216
	array_transmit2[0]=0x55;
 28a:	f6 e0       	ldi	r31, 0x06	; 6
 28c:	20 83       	st	Z, r18
 28e:	91 83       	std	Z+1, r25	; 0x01
	array_transmit2[1]=0xAA;
 290:	84 83       	std	Z+4, r24	; 0x04
	array_transmit2[4]=0x02;
 292:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	while (1)
 {
	
  if (i < 15){
 296:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 29a:	0f 97       	sbiw	r24, 0x0f	; 15
 29c:	98 f5       	brcc	.+102    	; 0x304 <main+0xaa>
 29e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <record_length_tmp>
	  record_length = record_length_tmp;
 2a2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <record_length_tmp+0x1>
 2a6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <record_length+0x1>
 2aa:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <record_length>
 2ae:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sample_rate_raw_tmp>
	  sample_rate_raw = sample_rate_raw_tmp;
 2b2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sample_rate_raw_tmp+0x1>
 2b6:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <sample_rate_raw+0x1>
 2ba:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <sample_rate_raw>
 2be:	9c 01       	movw	r18, r24
	  length=(record_length+7);
 2c0:	29 5f       	subi	r18, 0xF9	; 249
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <length+0x1>
 2c8:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <length>
 2cc:	e6 e2       	ldi	r30, 0x26	; 38
	  
	  array_transmit[2]=(length>>8);
 2ce:	f2 e0       	ldi	r31, 0x02	; 2
 2d0:	32 83       	std	Z+2, r19	; 0x02
 2d2:	23 83       	std	Z+3, r18	; 0x03
	  array_transmit[3]= length;
 2d4:	ac 01       	movw	r20, r24
	  array_transmit[length-2]=0x00;
 2d6:	4b 5f       	subi	r20, 0xFB	; 251
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255
 2da:	fa 01       	movw	r30, r20
 2dc:	ea 5d       	subi	r30, 0xDA	; 218
 2de:	fd 4f       	sbci	r31, 0xFD	; 253
 2e0:	10 82       	st	Z, r1
 2e2:	06 96       	adiw	r24, 0x06	; 6
	  //array_transmit[length-1]=calculateLRC(array_receive,length);
	  array_transmit[length-1]=0x00;
 2e4:	fc 01       	movw	r30, r24
 2e6:	ea 5d       	subi	r30, 0xDA	; 218
 2e8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ea:	10 82       	st	Z, r1
 2ec:	e8 ed       	ldi	r30, 0xD8	; 216
	  
	  
	  array_transmit2[2]= (length>>8);
 2ee:	f6 e0       	ldi	r31, 0x06	; 6
 2f0:	32 83       	std	Z+2, r19	; 0x02
 2f2:	23 83       	std	Z+3, r18	; 0x03
	  array_transmit2[3]= length;
 2f4:	fa 01       	movw	r30, r20
	  array_transmit2[length-2]=0x00;
 2f6:	e8 52       	subi	r30, 0x28	; 40
 2f8:	f9 4f       	sbci	r31, 0xF9	; 249
 2fa:	10 82       	st	Z, r1
 2fc:	fc 01       	movw	r30, r24
	  //array_transmit2[length-1]=calculateLRC(array_receive,length);
	  array_transmit2[length-1]=0x00;
 2fe:	e8 52       	subi	r30, 0x28	; 40
 300:	f9 4f       	sbci	r31, 0xF9	; 249
 302:	10 82       	st	Z, r1
 304:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <receiveflag>
  }
	 if (receiveflag==1 ){
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0xb4>
 30c:	94 c0       	rjmp	.+296    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 30e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <receiveflag>
		 
		receiveflag=0;
 312:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <array_receive+0x4>
		
		switch(array_receive[4])
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	21 f0       	breq	.+8      	; 0x322 <main+0xc8>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	09 f4       	brne	.+2      	; 0x320 <main+0xc6>
 31e:	42 c0       	rjmp	.+132    	; 0x3a4 <main+0x14a>
 320:	8a c0       	rjmp	.+276    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 322:	eb e1       	ldi	r30, 0x1B	; 27
			case 0x01: //BTN pressed is Generator tab , 0x00~BTN0, 0x01~BTN1, 0x02~BTN2, 0x03~BTN3, 9 elementer i array_receive.
			
			//DDRG|=(1<<PG5);
			//PORTG^=(1<<PG5);
			
			button_data = array_receive[5]; //button data
 324:	f2 e0       	ldi	r31, 0x02	; 2
 326:	85 81       	ldd	r24, Z+5	; 0x05
 328:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <button_data>
 32c:	96 81       	ldd	r25, Z+6	; 0x06
			sw_data = array_receive[6]; // sw data
 32e:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <sw_data>
 332:	81 11       	cpse	r24, r1
			
			if (button_data == 0x00) {  //enter
 334:	15 c0       	rjmp	.+42     	; 0x360 <main+0x106>
 336:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <indicator>
				if (indicator == 0x00) {
 33a:	81 11       	cpse	r24, r1
 33c:	06 c0       	rjmp	.+12     	; 0x34a <main+0xf0>
 33e:	94 30       	cpi	r25, 0x04	; 4
					if (sw_data <= 0x03){
 340:	08 f0       	brcs	.+2      	; 0x344 <main+0xea>
 342:	79 c0       	rjmp	.+242    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 344:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <shape_out>
					shape_out = sw_data;
 348:	76 c0       	rjmp	.+236    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 34a:	81 30       	cpi	r24, 0x01	; 1
					}
				}
				else if (indicator == 0x01){
 34c:	19 f4       	brne	.+6      	; 0x354 <main+0xfa>
 34e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Ampl_out>
					Ampl_out = sw_data;
 352:	71 c0       	rjmp	.+226    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 354:	82 30       	cpi	r24, 0x02	; 2
				}
				else if (indicator == 0x02){
 356:	09 f0       	breq	.+2      	; 0x35a <main+0x100>
 358:	6e c0       	rjmp	.+220    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 35a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <Freq_out>
					Freq_out = sw_data;
 35e:	6b c0       	rjmp	.+214    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 360:	81 30       	cpi	r24, 0x01	; 1
				}
			}
			else if(button_data == 0x01){   //select
 362:	59 f4       	brne	.+22     	; 0x37a <main+0x120>
 364:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <indicator>
				if (indicator < 2) {
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	20 f4       	brcc	.+8      	; 0x374 <main+0x11a>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
					indicator++;
 36e:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <indicator>
 372:	61 c0       	rjmp	.+194    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 374:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <indicator>
				}
				else {
					indicator = 0;
 378:	5e c0       	rjmp	.+188    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 37a:	82 30       	cpi	r24, 0x02	; 2
				}
			}
			else if(button_data == 0x02){   //run/stop
 37c:	39 f4       	brne	.+14     	; 0x38c <main+0x132>
 37e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <run>
				run = !run;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	89 27       	eor	r24, r25
 386:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <run>
 38a:	55 c0       	rjmp	.+170    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 38c:	83 30       	cpi	r24, 0x03	; 3
			}
			else if(button_data == 0x03){   //reset
 38e:	09 f0       	breq	.+2      	; 0x392 <main+0x138>
 390:	52 c0       	rjmp	.+164    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 392:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <Freq_out>
				Freq_out = 0;
 396:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <Ampl_out>
				Ampl_out = 0;
 39a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <shape_out>
				shape_out = 0;
 39e:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <indicator>
				indicator = 0;
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3a4:	eb e1       	ldi	r30, 0x1B	; 27
			
			break;
			
			case 0x02: // Oscilloscope data, Send pressed in osc tab, 
			
			record_length_tmp=((array_receive[7]<<8)|(array_receive[8]));
 3a6:	f2 e0       	ldi	r31, 0x02	; 2
 3a8:	87 81       	ldd	r24, Z+7	; 0x07
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	98 2f       	mov	r25, r24
 3ae:	88 27       	eor	r24, r24
 3b0:	20 85       	ldd	r18, Z+8	; 0x08
 3b2:	82 2b       	or	r24, r18
 3b4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <record_length_tmp+0x1>
 3b8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <record_length_tmp>
 3bc:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <record_length>
			length=(record_length+7);
 3c0:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <record_length+0x1>
 3c4:	8e 01       	movw	r16, r28
 3c6:	09 5f       	subi	r16, 0xF9	; 249
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <length+0x1>
 3ce:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <length>
 3d2:	25 81       	ldd	r18, Z+5	; 0x05
			samplerate =((array_receive[5]<<8)|(array_receive[6]));
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	32 2f       	mov	r19, r18
 3d8:	22 27       	eor	r18, r18
 3da:	86 81       	ldd	r24, Z+6	; 0x06
 3dc:	28 2b       	or	r18, r24
 3de:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <samplerate+0x1>
 3e2:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <samplerate>
 3e6:	40 e0       	ldi	r20, 0x00	; 0
			sample_rate_raw_tmp = 65536-(250000/samplerate);
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	60 e9       	ldi	r22, 0x90	; 144
 3ec:	70 ed       	ldi	r23, 0xD0	; 208
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	10 d2       	rcall	.+1056   	; 0x814 <__divmodsi4>
 3f4:	31 95       	neg	r19
 3f6:	21 95       	neg	r18
 3f8:	31 09       	sbc	r19, r1
 3fa:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <sample_rate_raw_tmp+0x1>
 3fe:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <sample_rate_raw_tmp>
 402:	e6 e2       	ldi	r30, 0x26	; 38
			
				
				array_transmit[2]=(length>>8);
 404:	f2 e0       	ldi	r31, 0x02	; 2
 406:	12 83       	std	Z+2, r17	; 0x02
 408:	03 83       	std	Z+3, r16	; 0x03
				array_transmit[3]= length;
 40a:	ce 01       	movw	r24, r28
				array_transmit[length-2]=0x00;
 40c:	05 96       	adiw	r24, 0x05	; 5
 40e:	fc 01       	movw	r30, r24
 410:	ea 5d       	subi	r30, 0xDA	; 218
 412:	fd 4f       	sbci	r31, 0xFD	; 253
 414:	10 82       	st	Z, r1
 416:	26 96       	adiw	r28, 0x06	; 6
				//array_transmit[length-1]=calculateLRC(array_receive,length);
				array_transmit[length-1]=0x00;
 418:	fe 01       	movw	r30, r28
 41a:	ea 5d       	subi	r30, 0xDA	; 218
 41c:	fd 4f       	sbci	r31, 0xFD	; 253
 41e:	10 82       	st	Z, r1
 420:	e8 ed       	ldi	r30, 0xD8	; 216
				
				
				array_transmit2[2]= (length>>8);
 422:	f6 e0       	ldi	r31, 0x06	; 6
 424:	12 83       	std	Z+2, r17	; 0x02
 426:	03 83       	std	Z+3, r16	; 0x03
				array_transmit2[3]= length;
 428:	fc 01       	movw	r30, r24
				array_transmit2[length-2]=0x00;
 42a:	e8 52       	subi	r30, 0x28	; 40
 42c:	f9 4f       	sbci	r31, 0xF9	; 249
 42e:	10 82       	st	Z, r1
 430:	c8 52       	subi	r28, 0x28	; 40
				//array_transmit2[length-1]=calculateLRC(array_receive,length);
				array_transmit2[length-1]=0x00;
 432:	d9 4f       	sbci	r29, 0xF9	; 249
 434:	18 82       	st	Y, r1
 436:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <control>
	  
	   	
	
  }
  
  	if ((control==1) && (tx_done==0))
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	71 f4       	brne	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <tx_done>
 442:	81 11       	cpse	r24, r1
 444:	0a c0       	rjmp	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 446:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <length>
  	{
	  	putsUSART0(array_transmit,length);
 44a:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <length+0x1>
 44e:	86 e2       	ldi	r24, 0x26	; 38
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	bf d1       	rcall	.+894    	; 0x7d2 <putsUSART0>
 454:	81 e0       	ldi	r24, 0x01	; 1
	  	tx_done=1;
 456:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <tx_done>
 45a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <control>
		  
  	}
  	if ((control==0) && (tx_done==1))
 45e:	81 11       	cpse	r24, r1
 460:	0d c0       	rjmp	.+26     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 462:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <tx_done>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	49 f4       	brne	.+18     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
  	{
	  	putsUSART0(array_transmit2,length);
 46a:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <length>
 46e:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <length+0x1>
 472:	88 ed       	ldi	r24, 0xD8	; 216
 474:	96 e0       	ldi	r25, 0x06	; 6
 476:	ad d1       	rcall	.+858    	; 0x7d2 <putsUSART0>
 478:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <tx_done>
	  	tx_done=0;
		
  	}
	  

	if (timer_count >= (samplerate / 10)){    //SPI send @10Hz
 47c:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <samplerate>
 480:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <samplerate+0x1>
 484:	ad ec       	ldi	r26, 0xCD	; 205
 486:	bc ec       	ldi	r27, 0xCC	; 204
 488:	e1 d1       	rcall	.+962    	; 0x84c <__umulhisi3>
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <timer_count>
 49a:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <timer_count+0x1>
 49e:	28 17       	cp	r18, r24
 4a0:	39 07       	cpc	r19, r25
 4a2:	08 f4       	brcc	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a4:	f6 ce       	rjmp	.-532    	; 0x292 <main+0x38>
		uint8_t freq = 0;
		uint8_t shape = 0;
		uint8_t ampl = 0;
		
		
		timer_count = 0;
 4a6:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer_count+0x1>
 4aa:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timer_count>
		data_ok = 0;
		freq = 0;
		ampl = 0;
		shape = 0;
		uint32_t test = 0;
		test = fpga_get_data();
 4ae:	a0 d0       	rcall	.+320    	; 0x5f0 <fpga_get_data>
 4b0:	6b 01       	movw	r12, r22
 4b2:	7c 01       	movw	r14, r24
		data_ok |= (test >> 24) & 0xFF000000;
		freq |= (test >> 16);
 4b4:	4c 01       	movw	r8, r24
 4b6:	aa 24       	eor	r10, r10
		shape |= (test >> 8);
 4b8:	bb 24       	eor	r11, r11
 4ba:	47 2e       	mov	r4, r23
 4bc:	58 2e       	mov	r5, r24
		ampl |= test & 0xFF;
		
		//putsUSART0(data_ok);
		
		
		putchUSART0(0x55);
 4be:	69 2e       	mov	r6, r25
 4c0:	77 24       	eor	r7, r7
		putchUSART0(0xAA);
 4c2:	85 e5       	ldi	r24, 0x55	; 85
 4c4:	7f d1       	rcall	.+766    	; 0x7c4 <putchUSART0>
		putchUSART0(0x00);
 4c6:	8a ea       	ldi	r24, 0xAA	; 170
 4c8:	7d d1       	rcall	.+762    	; 0x7c4 <putchUSART0>
		putchUSART0(0x0B); //length
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	7b d1       	rcall	.+758    	; 0x7c4 <putchUSART0>
		putchUSART0(0x01);
 4ce:	8b e0       	ldi	r24, 0x0B	; 11
 4d0:	79 d1       	rcall	.+754    	; 0x7c4 <putchUSART0>
		putchUSART0(indicator);   //indicator
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	77 d1       	rcall	.+750    	; 0x7c4 <putchUSART0>
 4d6:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <indicator>
		putchUSART0(shape);
 4da:	74 d1       	rcall	.+744    	; 0x7c4 <putchUSART0>
 4dc:	84 2d       	mov	r24, r4
 4de:	72 d1       	rcall	.+740    	; 0x7c4 <putchUSART0>
		putchUSART0(ampl);
 4e0:	8c 2d       	mov	r24, r12
 4e2:	70 d1       	rcall	.+736    	; 0x7c4 <putchUSART0>
 4e4:	88 2d       	mov	r24, r8
		putchUSART0(freq);
 4e6:	6e d1       	rcall	.+732    	; 0x7c4 <putchUSART0>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
		
		
		putchUSART0(0x00);
 4ea:	6c d1       	rcall	.+728    	; 0x7c4 <putchUSART0>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	6a d1       	rcall	.+724    	; 0x7c4 <putchUSART0>
		putchUSART0(0x00);
 4f0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <run>
 4f4:	87 95       	ror	r24
		
		PORTB = (run << PB7);
 4f6:	88 27       	eor	r24, r24
 4f8:	87 95       	ror	r24
 4fa:	85 b9       	out	0x05, r24	; 5
 4fc:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <shape_out>
 500:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <Freq_out>
		fpga_send_data(run, Ampl_out, Freq_out, shape_out);
 504:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <Ampl_out>
 508:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <run>
 50c:	ff d0       	rcall	.+510    	; 0x70c <fpga_send_data>
 50e:	c1 ce       	rjmp	.-638    	; 0x292 <main+0x38>

00000510 <__vector_25>:
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
	  	
}

	
ISR(USART0_RX_vect)
{	
 518:	11 24       	eor	r1, r1
 51a:	0b b6       	in	r0, 0x3b	; 59
 51c:	0f 92       	push	r0
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
	
	
	static unsigned int i=0;
	array_receive[i]= UDR0;
 52a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 52e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 532:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 536:	fc 01       	movw	r30, r24
 538:	e5 5e       	subi	r30, 0xE5	; 229
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	20 83       	st	Z, r18
	i++;
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 544:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
	if ((array_receive[0] == 0x55) && (array_receive[1] == 0xAA) && (i==(array_receive[3] )))
 548:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <array_receive>
 54c:	25 35       	cpi	r18, 0x55	; 85
 54e:	89 f4       	brne	.+34     	; 0x572 <__vector_25+0x62>
 550:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <array_receive+0x1>
 554:	2a 3a       	cpi	r18, 0xAA	; 170
 556:	69 f4       	brne	.+26     	; 0x572 <__vector_25+0x62>
 558:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <array_receive+0x3>
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	82 17       	cp	r24, r18
 560:	93 07       	cpc	r25, r19
 562:	39 f4       	brne	.+14     	; 0x572 <__vector_25+0x62>
	{
		receiveflag = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <receiveflag>
		i=0;
 56a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 56e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
	}
	
	
	}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0b be       	out	0x3b, r0	; 59
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <SPI_init_master>:
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
	
	
	
	SPCR|= (0 << SPIE) |  ( 1 << SPR1) | (0<< SPR0) | (1 << SPE) | (1<<CPOL) ;
	SPDR = 0;
 58c:	96 2f       	mov	r25, r22
 58e:	24 b1       	in	r18, 0x04	; 4
 590:	27 60       	ori	r18, 0x07	; 7
 592:	24 b9       	out	0x04, r18	; 4
 594:	25 b1       	in	r18, 0x05	; 5
 596:	21 60       	ori	r18, 0x01	; 1
 598:	25 b9       	out	0x05, r18	; 5
 59a:	25 b1       	in	r18, 0x05	; 5
 59c:	28 60       	ori	r18, 0x08	; 8
 59e:	25 b9       	out	0x05, r18	; 5
 5a0:	1c bc       	out	0x2c, r1	; 44
 5a2:	2c b5       	in	r18, 0x2c	; 44
 5a4:	68 2f       	mov	r22, r24
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	ab 01       	movw	r20, r22
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	69 2f       	mov	r22, r25
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	64 2b       	or	r22, r20
 5c4:	62 2b       	or	r22, r18
 5c6:	63 65       	ori	r22, 0x53	; 83
 5c8:	6c bd       	out	0x2c, r22	; 44
 5ca:	1e bc       	out	0x2e, r1	; 46
 5cc:	08 95       	ret

000005ce <SPI_read>:
}


char SPI_read(){
	//PORTB &= ~(1 << PB0);
	SPDR = 0;
 5ce:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR &(1<<SPIF))) ; 
 5d0:	0d b4       	in	r0, 0x2d	; 45
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <SPI_read+0x2>
	unsigned char data = SPDR;
 5d6:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 5d8:	08 95       	ret

000005da <SPI_read_write>:
unsigned char SPI_read_write(char dat_in){
	//PORTB &= ~(1 << PB0);
	SPDR = dat_in;
 5da:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 5dc:	0d b4       	in	r0, 0x2d	; 45
 5de:	07 fe       	sbrs	r0, 7
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <SPI_read_write+0x2>
	unsigned char data = SPDR;
 5e2:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 5e4:	08 95       	ret

000005e6 <SPI_write>:


void SPI_write(unsigned char data){
	
	//PORTB &= ~(1 << PB0);
	SPDR = data;
 5e6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 5e8:	0d b4       	in	r0, 0x2d	; 45
 5ea:	07 fe       	sbrs	r0, 7
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <SPI_write+0x2>
	 
	//PORTB |= (1 << PB0);
	
	
	
}
 5ee:	08 95       	ret

000005f0 <fpga_get_data>:

uint32_t fpga_get_data() {
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	2a 97       	sbiw	r28, 0x0a	; 10
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 608:	00 e0       	ldi	r16, 0x00	; 0
 60a:	10 e0       	ldi	r17, 0x00	; 0
 60c:	3b c0       	rjmp	.+118    	; 0x684 <fpga_get_data+0x94>
		if (d < 4){
 60e:	04 30       	cpi	r16, 0x04	; 4
 610:	11 05       	cpc	r17, r1
 612:	4c f4       	brge	.+18     	; 0x626 <fpga_get_data+0x36>
			PORTB &= ~(1 << PB0);
 614:	85 b1       	in	r24, 0x05	; 5
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	85 b9       	out	0x05, r24	; 5
			SPI_write(0xA1);
 61a:	81 ea       	ldi	r24, 0xA1	; 161
 61c:	e4 df       	rcall	.-56     	; 0x5e6 <SPI_write>
			PORTB |= (1 << PB0);
 61e:	85 b1       	in	r24, 0x05	; 5
 620:	81 60       	ori	r24, 0x01	; 1
 622:	85 b9       	out	0x05, r24	; 5
 624:	2d c0       	rjmp	.+90     	; 0x680 <fpga_get_data+0x90>
		}
		else if (d == 4) {
 626:	04 30       	cpi	r16, 0x04	; 4
 628:	11 05       	cpc	r17, r1
 62a:	49 f4       	brne	.+18     	; 0x63e <fpga_get_data+0x4e>
			PORTB &= ~(1 << PB0);
 62c:	85 b1       	in	r24, 0x05	; 5
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	85 b9       	out	0x05, r24	; 5
			SPI_read_data[0] = SPI_read_write(0xAA);
 632:	8a ea       	ldi	r24, 0xAA	; 170
 634:	d2 df       	rcall	.-92     	; 0x5da <SPI_read_write>
			PORTB |= (1 << PB0);
 636:	85 b1       	in	r24, 0x05	; 5
 638:	81 60       	ori	r24, 0x01	; 1
 63a:	85 b9       	out	0x05, r24	; 5
 63c:	21 c0       	rjmp	.+66     	; 0x680 <fpga_get_data+0x90>
		}
		else if (d == 5){
 63e:	05 30       	cpi	r16, 0x05	; 5
 640:	11 05       	cpc	r17, r1
 642:	51 f4       	brne	.+20     	; 0x658 <fpga_get_data+0x68>
			PORTB &= ~(1 << PB0);
 644:	85 b1       	in	r24, 0x05	; 5
 646:	8e 7f       	andi	r24, 0xFE	; 254
			
			SPI_read_data[2] = SPI_read_write(0xAA);
 648:	85 b9       	out	0x05, r24	; 5
 64a:	8a ea       	ldi	r24, 0xAA	; 170
 64c:	c6 df       	rcall	.-116    	; 0x5da <SPI_read_write>
 64e:	8b 83       	std	Y+3, r24	; 0x03
			
			
			PORTB |= (1 << PB0);
 650:	85 b1       	in	r24, 0x05	; 5
 652:	81 60       	ori	r24, 0x01	; 1
 654:	85 b9       	out	0x05, r24	; 5
 656:	14 c0       	rjmp	.+40     	; 0x680 <fpga_get_data+0x90>
		}
		else if (d > 4 && d < 14){
 658:	c8 01       	movw	r24, r16
 65a:	05 97       	sbiw	r24, 0x05	; 5
 65c:	09 97       	sbiw	r24, 0x09	; 9
 65e:	80 f4       	brcc	.+32     	; 0x680 <fpga_get_data+0x90>
			PORTB &= ~(1 << PB0);
 660:	85 b1       	in	r24, 0x05	; 5
 662:	8e 7f       	andi	r24, 0xFE	; 254
			SPI_read_data[(d - 5)] = SPI_read();
 664:	85 b9       	out	0x05, r24	; 5
 666:	b3 df       	rcall	.-154    	; 0x5ce <SPI_read>
 668:	f8 01       	movw	r30, r16
 66a:	35 97       	sbiw	r30, 0x05	; 5
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	2c 0f       	add	r18, r28
 672:	3d 1f       	adc	r19, r29
 674:	e2 0f       	add	r30, r18
 676:	f3 1f       	adc	r31, r19
 678:	80 83       	st	Z, r24
			PORTB |= (1 << PB0);
 67a:	85 b1       	in	r24, 0x05	; 5
 67c:	81 60       	ori	r24, 0x01	; 1
 67e:	85 b9       	out	0x05, r24	; 5

uint32_t fpga_get_data() {
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 680:	0f 5f       	subi	r16, 0xFF	; 255
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	0e 30       	cpi	r16, 0x0E	; 14
 686:	11 05       	cpc	r17, r1
 688:	0c f4       	brge	.+2      	; 0x68c <fpga_get_data+0x9c>
 68a:	c1 cf       	rjmp	.-126    	; 0x60e <fpga_get_data+0x1e>
			PORTB &= ~(1 << PB0);
			SPI_read_data[(d - 5)] = SPI_read();
			PORTB |= (1 << PB0);
		}
	}
	xor8 = SPI_read_data[2] ^ SPI_read_data[3] ^ SPI_read_data[4] ^ SPI_read_data[5] ^  SPI_read_data[6] ;
 68c:	9b 81       	ldd	r25, Y+3	; 0x03
 68e:	3c 81       	ldd	r19, Y+4	; 0x04
 690:	6d 81       	ldd	r22, Y+5	; 0x05
 692:	4e 81       	ldd	r20, Y+6	; 0x06
 694:	2f 81       	ldd	r18, Y+7	; 0x07
 696:	89 2f       	mov	r24, r25
 698:	83 27       	eor	r24, r19
 69a:	86 27       	eor	r24, r22
 69c:	84 27       	eor	r24, r20
 69e:	82 27       	eor	r24, r18
	if ((xor8 == SPI_read_data[7]) && (SPI_read_data[2] == 0xAA) && (SPI_read_data[3] == 0xFF)){
 6a0:	58 85       	ldd	r21, Y+8	; 0x08
 6a2:	85 13       	cpse	r24, r21
 6a4:	1a c0       	rjmp	.+52     	; 0x6da <fpga_get_data+0xea>
 6a6:	9a 3a       	cpi	r25, 0xAA	; 170
 6a8:	e9 f4       	brne	.+58     	; 0x6e4 <fpga_get_data+0xf4>
 6aa:	3f 3f       	cpi	r19, 0xFF	; 255
 6ac:	01 f5       	brne	.+64     	; 0x6ee <fpga_get_data+0xfe>
	
	gen_data |= SPI_read_data[4] ;
 6ae:	86 2f       	mov	r24, r22
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	a0 e0       	ldi	r26, 0x00	; 0
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
	gen_data  <<= 16;
 6b6:	dc 01       	movw	r26, r24
 6b8:	99 27       	eor	r25, r25
 6ba:	88 27       	eor	r24, r24
	
	gen_data |= (SPI_read_data[5] << 8);
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	74 2f       	mov	r23, r20
 6c0:	66 27       	eor	r22, r22
 6c2:	ab 01       	movw	r20, r22
 6c4:	77 0f       	add	r23, r23
 6c6:	66 0b       	sbc	r22, r22
 6c8:	77 0b       	sbc	r23, r23
 6ca:	84 2b       	or	r24, r20
 6cc:	95 2b       	or	r25, r21
 6ce:	a6 2b       	or	r26, r22
 6d0:	b7 2b       	or	r27, r23
	gen_data |= SPI_read_data[6] ;
 6d2:	bc 01       	movw	r22, r24
 6d4:	cd 01       	movw	r24, r26
 6d6:	62 2b       	or	r22, r18
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <fpga_get_data+0x106>
	}
	else {
		gen_data = 0x37000000;
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	97 e3       	ldi	r25, 0x37	; 55
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <fpga_get_data+0x106>
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	97 e3       	ldi	r25, 0x37	; 55
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <fpga_get_data+0x106>
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	97 e3       	ldi	r25, 0x37	; 55
	/*for (int v = 0; v < 10 ; v++){
		uart_send_char(SPI_read_data[v]);
		//uart_send_char(v);
	}*/
	return gen_data;
}
 6f6:	2a 96       	adiw	r28, 0x0a	; 10
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	08 95       	ret

0000070c <fpga_send_data>:

void fpga_send_data(bool state, uint8_t a, uint8_t f, uint8_t s){
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	28 97       	sbiw	r28, 0x08	; 8
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
	uint8_t shape_stat = 0;
	shape_stat |= s;
	shape_stat |= (state << 7);
 724:	90 e8       	ldi	r25, 0x80	; 128
 726:	89 9f       	mul	r24, r25
 728:	f0 01       	movw	r30, r0
 72a:	11 24       	eor	r1, r1
 72c:	e2 2b       	or	r30, r18
	uint8_t spi_out[8] = { 0xDC, 0xCA, state, a, f, shape_stat,(0xDC ^ 0xCA ^ state ^ s ^ f ^ a),0x00};
 72e:	9c ed       	ldi	r25, 0xDC	; 220
 730:	99 83       	std	Y+1, r25	; 0x01
 732:	9a ec       	ldi	r25, 0xCA	; 202
 734:	9a 83       	std	Y+2, r25	; 0x02
 736:	8b 83       	std	Y+3, r24	; 0x03
 738:	6c 83       	std	Y+4, r22	; 0x04
 73a:	4d 83       	std	Y+5, r20	; 0x05
 73c:	ee 83       	std	Y+6, r30	; 0x06
 73e:	82 27       	eor	r24, r18
 740:	84 27       	eor	r24, r20
 742:	68 27       	eor	r22, r24
 744:	86 e1       	ldi	r24, 0x16	; 22
 746:	68 27       	eor	r22, r24
 748:	6f 83       	std	Y+7, r22	; 0x07
 74a:	18 86       	std	Y+8, r1	; 0x08
	
	for (int v = 0; v < 8 ; v++){
 74c:	00 e0       	ldi	r16, 0x00	; 0
 74e:	10 e0       	ldi	r17, 0x00	; 0
 750:	10 c0       	rjmp	.+32     	; 0x772 <fpga_send_data+0x66>
		PORTB &= ~(1 << PB0);
 752:	85 b1       	in	r24, 0x05	; 5
 754:	8e 7f       	andi	r24, 0xFE	; 254
 756:	85 b9       	out	0x05, r24	; 5
		SPI_write(spi_out[v]);
 758:	e1 e0       	ldi	r30, 0x01	; 1
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	ec 0f       	add	r30, r28
 75e:	fd 1f       	adc	r31, r29
 760:	e0 0f       	add	r30, r16
 762:	f1 1f       	adc	r31, r17
 764:	80 81       	ld	r24, Z
 766:	3f df       	rcall	.-386    	; 0x5e6 <SPI_write>
		PORTB |= (1 << PB0);
 768:	85 b1       	in	r24, 0x05	; 5
 76a:	81 60       	ori	r24, 0x01	; 1
 76c:	85 b9       	out	0x05, r24	; 5
	uint8_t shape_stat = 0;
	shape_stat |= s;
	shape_stat |= (state << 7);
	uint8_t spi_out[8] = { 0xDC, 0xCA, state, a, f, shape_stat,(0xDC ^ 0xCA ^ state ^ s ^ f ^ a),0x00};
	
	for (int v = 0; v < 8 ; v++){
 76e:	0f 5f       	subi	r16, 0xFF	; 255
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	08 30       	cpi	r16, 0x08	; 8
 774:	11 05       	cpc	r17, r1
 776:	6c f3       	brlt	.-38     	; 0x752 <fpga_send_data+0x46>
		SPI_write(spi_out[v]);
		PORTB |= (1 << PB0);
	}
		
	
 778:	28 96       	adiw	r28, 0x08	; 8
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	de bf       	out	0x3e, r29	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	cd bf       	out	0x3d, r28	; 61
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	08 95       	ret

0000078e <init_timer>:
 78e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 792:	e1 e8       	ldi	r30, 0x81	; 129
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	83 60       	ori	r24, 0x03	; 3
 79a:	80 83       	st	Z, r24
 79c:	ef e6       	ldi	r30, 0x6F	; 111
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	81 60       	ori	r24, 0x01	; 1
 7a4:	80 83       	st	Z, r24
 7a6:	08 95       	ret

000007a8 <uart_Init>:
}
char getchUSART0(void)
{
	while(!(UCSR0A&(1<<RXC0))); //wait till char received
	return UDR0;
}
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7ae:	e1 ec       	ldi	r30, 0xC1	; 193
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	88 61       	ori	r24, 0x18	; 24
 7b6:	80 83       	st	Z, r24
 7b8:	e2 ec       	ldi	r30, 0xC2	; 194
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	86 60       	ori	r24, 0x06	; 6
 7c0:	80 83       	st	Z, r24
 7c2:	08 95       	ret

000007c4 <putchUSART0>:
void putchUSART0(char tx)
{
	while(!(UCSR0A & (1<<UDRE0)));   // wait for empty transmit buffer
 7c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7c8:	95 ff       	sbrs	r25, 5
 7ca:	fc cf       	rjmp	.-8      	; 0x7c4 <putchUSART0>
	UDR0 = tx;
 7cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 7d0:	08 95       	ret

000007d2 <putsUSART0>:
}
void putsUSART0(unsigned char ptr[], int length){
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	7c 01       	movw	r14, r24
 7e0:	8b 01       	movw	r16, r22
	int i=0;
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
 7e4:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<length){
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <putsUSART0+0x22>
		putchUSART0(ptr[i]);
 7e8:	f7 01       	movw	r30, r14
 7ea:	ec 0f       	add	r30, r28
 7ec:	fd 1f       	adc	r31, r29
 7ee:	80 81       	ld	r24, Z
 7f0:	e9 df       	rcall	.-46     	; 0x7c4 <putchUSART0>
		
		i++;
 7f2:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));   // wait for empty transmit buffer
	UDR0 = tx;
}
void putsUSART0(unsigned char ptr[], int length){
	int i=0;
	while(i<length){
 7f4:	c0 17       	cp	r28, r16
 7f6:	d1 07       	cpc	r29, r17
 7f8:	bc f3       	brlt	.-18     	; 0x7e8 <putsUSART0+0x16>
		
		i++;
		
	}
	
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	08 95       	ret

00000808 <setRecievei>:

void setRecievei(void)
{
	UCSR0B|=(1<<RXCIE0);
 808:	e1 ec       	ldi	r30, 0xC1	; 193
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	80 83       	st	Z, r24
 812:	08 95       	ret

00000814 <__divmodsi4>:
 814:	05 2e       	mov	r0, r21
 816:	97 fb       	bst	r25, 7
 818:	16 f4       	brtc	.+4      	; 0x81e <__divmodsi4+0xa>
 81a:	00 94       	com	r0
 81c:	0f d0       	rcall	.+30     	; 0x83c <__negsi2>
 81e:	57 fd       	sbrc	r21, 7
 820:	05 d0       	rcall	.+10     	; 0x82c <__divmodsi4_neg2>
 822:	23 d0       	rcall	.+70     	; 0x86a <__udivmodsi4>
 824:	07 fc       	sbrc	r0, 7
 826:	02 d0       	rcall	.+4      	; 0x82c <__divmodsi4_neg2>
 828:	46 f4       	brtc	.+16     	; 0x83a <__divmodsi4_exit>
 82a:	08 c0       	rjmp	.+16     	; 0x83c <__negsi2>

0000082c <__divmodsi4_neg2>:
 82c:	50 95       	com	r21
 82e:	40 95       	com	r20
 830:	30 95       	com	r19
 832:	21 95       	neg	r18
 834:	3f 4f       	sbci	r19, 0xFF	; 255
 836:	4f 4f       	sbci	r20, 0xFF	; 255
 838:	5f 4f       	sbci	r21, 0xFF	; 255

0000083a <__divmodsi4_exit>:
 83a:	08 95       	ret

0000083c <__negsi2>:
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	08 95       	ret

0000084c <__umulhisi3>:
 84c:	a2 9f       	mul	r26, r18
 84e:	b0 01       	movw	r22, r0
 850:	b3 9f       	mul	r27, r19
 852:	c0 01       	movw	r24, r0
 854:	a3 9f       	mul	r26, r19
 856:	70 0d       	add	r23, r0
 858:	81 1d       	adc	r24, r1
 85a:	11 24       	eor	r1, r1
 85c:	91 1d       	adc	r25, r1
 85e:	b2 9f       	mul	r27, r18
 860:	70 0d       	add	r23, r0
 862:	81 1d       	adc	r24, r1
 864:	11 24       	eor	r1, r1
 866:	91 1d       	adc	r25, r1
 868:	08 95       	ret

0000086a <__udivmodsi4>:
 86a:	a1 e2       	ldi	r26, 0x21	; 33
 86c:	1a 2e       	mov	r1, r26
 86e:	aa 1b       	sub	r26, r26
 870:	bb 1b       	sub	r27, r27
 872:	fd 01       	movw	r30, r26
 874:	0d c0       	rjmp	.+26     	; 0x890 <__udivmodsi4_ep>

00000876 <__udivmodsi4_loop>:
 876:	aa 1f       	adc	r26, r26
 878:	bb 1f       	adc	r27, r27
 87a:	ee 1f       	adc	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	a2 17       	cp	r26, r18
 880:	b3 07       	cpc	r27, r19
 882:	e4 07       	cpc	r30, r20
 884:	f5 07       	cpc	r31, r21
 886:	20 f0       	brcs	.+8      	; 0x890 <__udivmodsi4_ep>
 888:	a2 1b       	sub	r26, r18
 88a:	b3 0b       	sbc	r27, r19
 88c:	e4 0b       	sbc	r30, r20
 88e:	f5 0b       	sbc	r31, r21

00000890 <__udivmodsi4_ep>:
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	1a 94       	dec	r1
 89a:	69 f7       	brne	.-38     	; 0x876 <__udivmodsi4_loop>
 89c:	60 95       	com	r22
 89e:	70 95       	com	r23
 8a0:	80 95       	com	r24
 8a2:	90 95       	com	r25
 8a4:	9b 01       	movw	r18, r22
 8a6:	ac 01       	movw	r20, r24
 8a8:	bd 01       	movw	r22, r26
 8aa:	cf 01       	movw	r24, r30
 8ac:	08 95       	ret

000008ae <_exit>:
 8ae:	f8 94       	cli

000008b0 <__stop_program>:
 8b0:	ff cf       	rjmp	.-2      	; 0x8b0 <__stop_program>
