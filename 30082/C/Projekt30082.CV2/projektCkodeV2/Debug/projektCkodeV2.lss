
projektCkodeV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fd0  00800204  00800204  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d6  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000399  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	80 c0       	rjmp	.+256    	; 0x146 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	59 c1       	rjmp	.+690    	; 0x318 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	21 e1       	ldi	r18, 0x11	; 17
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 3d       	cpi	r26, 0xD4	; 212
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	94 d0       	rcall	.+296    	; 0x248 <main>
 120:	7c c1       	rjmp	.+760    	; 0x41a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <checksumvalue>:
 * Created: 06-01-2023 12:59:24
 *  Author: abid
 */ 

int checksumvalue(unsigned char *bufferptr, int Datasize)
{
 124:	dc 01       	movw	r26, r24
	unsigned int LRC = 0;
	
	for (int i=0; i < (Datasize); i++)
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 *  Author: abid
 */ 

int checksumvalue(unsigned char *bufferptr, int Datasize)
{
	unsigned int LRC = 0;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i=0; i < (Datasize); i++)
 12e:	07 c0       	rjmp	.+14     	; 0x13e <checksumvalue+0x1a>
	{
		LRC ^= bufferptr[i];
 130:	fd 01       	movw	r30, r26
 132:	e2 0f       	add	r30, r18
 134:	f3 1f       	adc	r31, r19
 136:	40 81       	ld	r20, Z
 138:	84 27       	eor	r24, r20

int checksumvalue(unsigned char *bufferptr, int Datasize)
{
	unsigned int LRC = 0;
	
	for (int i=0; i < (Datasize); i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	26 17       	cp	r18, r22
 140:	37 07       	cpc	r19, r23
 142:	b4 f3       	brlt	.-20     	; 0x130 <checksumvalue+0xc>
	{
		LRC ^= bufferptr[i];
	}
	
	return LRC;
}
 144:	08 95       	ret

00000146 <__vector_17>:


uint32_t micros(){
	return micro;
}
ISR(TIMER1_COMPA_vect){ //interrupt every 1ms, set through timer prescale and counter compare
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
	micro++;
 158:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <micro>
 15c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <micro+0x1>
 160:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <micro+0x2>
 164:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <micro+0x3>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	a1 1d       	adc	r26, r1
 16c:	b1 1d       	adc	r27, r1
 16e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <micro>
 172:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <micro+0x1>
 176:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <micro+0x2>
 17a:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <micro+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 17e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 182:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_29>:


ISR (ADC_vect) 
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	static unsigned int index = 5;
	
	if( ControlAdc == 0)
 1b6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <ControlAdc>
 1ba:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <ControlAdc+0x1>
 1be:	21 15       	cp	r18, r1
 1c0:	31 05       	cpc	r19, r1
 1c2:	51 f4       	brne	.+20     	; 0x1d8 <__vector_29+0x40>
	{
		ADCBUFFERTest[index]= ADCH;
 1c4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1d0:	e2 51       	subi	r30, 0x12	; 18
 1d2:	f6 4f       	sbci	r31, 0xF6	; 246
 1d4:	80 83       	st	Z, r24
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <__vector_29+0x52>
	}
	else
	{
		ADCBUFFERTest2[index] = ADCH;
 1d8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1dc:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1e4:	e9 52       	subi	r30, 0x29	; 41
 1e6:	f2 4f       	sbci	r31, 0xF2	; 242
 1e8:	80 83       	st	Z, r24
	}
	
	index++;
 1ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	if (index >= recordL)
 1fc:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <recordL>
 200:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <recordL+0x1>
 204:	84 17       	cp	r24, r20
 206:	95 07       	cpc	r25, r21
 208:	80 f0       	brcs	.+32     	; 0x22a <__vector_29+0x92>
	{
		ControlAdc ^= 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	28 27       	eor	r18, r24
 20e:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <ControlAdc+0x1>
 212:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <ControlAdc>
		ADC_ReadyTest = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 21e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
		index = 0;
 222:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 226:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0b be       	out	0x3b, r0	; 59
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <main>:



int main (void){
	
	sei();
 248:	78 94       	sei
	timerinit();
 24a:	4b d0       	rcall	.+150    	; 0x2e2 <timerinit>
	uart_init(115200);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	72 ec       	ldi	r23, 0xC2	; 194
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	8d d0       	rcall	.+282    	; 0x370 <uart_init>
	
	lenght = recordL+7;
 256:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <recordL>
 25a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <recordL+0x1>
 25e:	07 96       	adiw	r24, 0x07	; 7
 260:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <lenght>
 264:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <lenght+0x1>
	
	TransmitTest[0] = 0x55;	//Sync byte 1
 268:	ee e0       	ldi	r30, 0x0E	; 14
 26a:	f2 e0       	ldi	r31, 0x02	; 2
 26c:	25 e5       	ldi	r18, 0x55	; 85
 26e:	20 83       	st	Z, r18
	TransmitTest[1] = 0xAA;	//Sync byte 2
 270:	2a ea       	ldi	r18, 0xAA	; 170
 272:	21 83       	std	Z+1, r18	; 0x01
	TransmitTest[2] = ((lenght)>>8);
 274:	92 83       	std	Z+2, r25	; 0x02
	TransmitTest[3] = (lenght);
 276:	83 83       	std	Z+3, r24	; 0x03
	TransmitTest[4] = 0x02;	//Type osilliscope data
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	84 83       	std	Z+4, r24	; 0x04
     while(1){
		 
	   //  if(micros() - prev_cycle_time >= 1000){
	   //  prev_cycle_time = micros();
	
	for (int i = 0; i < recordL; i++){ 
 27c:	00 e0       	ldi	r16, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	27 c0       	rjmp	.+78     	; 0x2d0 <main+0x88>
		
		if ((i >= 5) && (i<recordL-2)){
 282:	05 30       	cpi	r16, 0x05	; 5
 284:	11 05       	cpc	r17, r1
 286:	74 f0       	brlt	.+28     	; 0x2a4 <main+0x5c>
 288:	ac 01       	movw	r20, r24
 28a:	42 50       	subi	r20, 0x02	; 2
 28c:	51 09       	sbc	r21, r1
 28e:	24 17       	cp	r18, r20
 290:	35 07       	cpc	r19, r21
 292:	40 f4       	brcc	.+16     	; 0x2a4 <main+0x5c>
			TransmitTest[5+i] = ADCBUFFERTest2[i];
			 
		}
		else
		{
			TransmitTest[5+i] = ADCBUFFERTest[i];
 294:	f8 01       	movw	r30, r16
 296:	e2 51       	subi	r30, 0x12	; 18
 298:	f6 4f       	sbci	r31, 0xF6	; 246
 29a:	20 81       	ld	r18, Z
 29c:	f8 01       	movw	r30, r16
 29e:	ed 5e       	subi	r30, 0xED	; 237
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	20 83       	st	Z, r18
		}
  
	}
	   
	 
	    TransmitTest[recordL+5] = 0x00;
 2a4:	bc 01       	movw	r22, r24
 2a6:	6b 5f       	subi	r22, 0xFB	; 251
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	fb 01       	movw	r30, r22
 2ac:	e2 5f       	subi	r30, 0xF2	; 242
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	10 82       	st	Z, r1
	    TransmitTest[recordL+6] = checksumvalue(TransmitTest,recordL+5);
 2b2:	ec 01       	movw	r28, r24
 2b4:	26 96       	adiw	r28, 0x06	; 6
 2b6:	8e e0       	ldi	r24, 0x0E	; 14
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	34 df       	rcall	.-408    	; 0x124 <checksumvalue>
 2bc:	c2 5f       	subi	r28, 0xF2	; 242
 2be:	dd 4f       	sbci	r29, 0xFD	; 253
 2c0:	88 83       	st	Y, r24
		//TransmitTest[i]=recordL+7;
	
	     uart_send_char(TransmitTest[i]); // data-transmit
 2c2:	f8 01       	movw	r30, r16
 2c4:	e2 5f       	subi	r30, 0xF2	; 242
 2c6:	fd 4f       	sbci	r31, 0xFD	; 253
 2c8:	80 81       	ld	r24, Z
 2ca:	7e d0       	rcall	.+252    	; 0x3c8 <uart_send_char>
     while(1){
		 
	   //  if(micros() - prev_cycle_time >= 1000){
	   //  prev_cycle_time = micros();
	
	for (int i = 0; i < recordL; i++){ 
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	1f 4f       	sbci	r17, 0xFF	; 255
 2d0:	98 01       	movw	r18, r16
 2d2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <recordL>
 2d6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <recordL+0x1>
 2da:	08 17       	cp	r16, r24
 2dc:	19 07       	cpc	r17, r25
 2de:	88 f2       	brcs	.-94     	; 0x282 <main+0x3a>
 2e0:	cd cf       	rjmp	.-102    	; 0x27c <main+0x34>

000002e2 <timerinit>:
#define BAUD 115200
#define UBRR ((F_CPU/8/BAUD)-1)


void timerinit(){
 	DDRB |= (1 << PB7);
 2e2:	84 b1       	in	r24, 0x04	; 4
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	84 b9       	out	0x04, r24	; 4
 	TCNT1 = 0x0000; // timer1 counter reset
 2e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 2ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 2f0:	e1 e8       	ldi	r30, 0x81	; 129
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	80 83       	st	Z, r24
 	TCCR1B |= (1 << WGM12); // CTC  operation mode
 2fa:	80 81       	ld	r24, Z
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	80 83       	st	Z, r24
 	TIMSK1 |= (1 << OCIE1A);
 300:	ef e6       	ldi	r30, 0x6F	; 111
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	82 60       	ori	r24, 0x02	; 2
 308:	80 83       	st	Z, r24
 	OCR1AH = 0x00;
 30a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 30e:	88 e1       	ldi	r24, 0x18	; 24
 310:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 	sei();
 314:	78 94       	sei
 316:	08 95       	ret

00000318 <__vector_25>:

char uart0_in [20];
uint8_t i = 0;
uint8_t uart0_full = 0;

ISR(USART0_RX_vect){      //rx interrupt
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	0b b6       	in	r0, 0x3b	; 59
 324:	0f 92       	push	r0
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	if (i <=19){    //buffer not full, read data
 32e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <i>
 332:	84 31       	cpi	r24, 0x14	; 20
 334:	68 f4       	brcc	.+26     	; 0x350 <__vector_25+0x38>
		uart0_in[i] = UDR0;
 336:	e8 2f       	mov	r30, r24
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 33e:	e0 54       	subi	r30, 0x40	; 64
 340:	fe 4e       	sbci	r31, 0xEE	; 238
 342:	90 83       	st	Z, r25
		i++;
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <i>
		uart0_full = 0;
 34a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <uart0_full>
 34e:	05 c0       	rjmp	.+10     	; 0x35a <__vector_25+0x42>
	}
	else {  //buffer full, ignore data and set flag
		i = 0;
 350:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <i>
		uart0_full = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <uart0_full>
	}
	//PORTB |= (1 << PB7);
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0b be       	out	0x3b, r0	; 59
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <uart_init>:


void uart_init(uint32_t baud){
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   //enable RX, TX
 374:	c1 ec       	ldi	r28, 0xC1	; 193
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	28 81       	ld	r18, Y
 37a:	28 61       	ori	r18, 0x18	; 24
 37c:	28 83       	st	Y, r18
	UCSR0A |= (1 << U2X0);
 37e:	e0 ec       	ldi	r30, 0xC0	; 192
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	20 81       	ld	r18, Z
 384:	22 60       	ori	r18, 0x02	; 2
 386:	20 83       	st	Z, r18
	//baud = 115200;
	UBRR0H = (16000000/8/(baud-1)) >> 8;             //set baudrate high bits
 388:	9b 01       	movw	r18, r22
 38a:	ac 01       	movw	r20, r24
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	31 09       	sbc	r19, r1
 390:	41 09       	sbc	r20, r1
 392:	51 09       	sbc	r21, r1
 394:	60 e8       	ldi	r22, 0x80	; 128
 396:	74 e8       	ldi	r23, 0x84	; 132
 398:	8e e1       	ldi	r24, 0x1E	; 30
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	1c d0       	rcall	.+56     	; 0x3d6 <__udivmodsi4>
 39e:	bb 27       	eor	r27, r27
 3a0:	a5 2f       	mov	r26, r21
 3a2:	94 2f       	mov	r25, r20
 3a4:	83 2f       	mov	r24, r19
 3a6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = 16000000/8/(baud-1);                     //set baudrate low byte
 3aa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C |= (1 << UCSZ00) | (1 <<  UCSZ01);
 3ae:	e2 ec       	ldi	r30, 0xC2	; 194
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	86 60       	ori	r24, 0x06	; 6
 3b6:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);                   //enable rx interrupt
 3b8:	88 81       	ld	r24, Y
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	88 83       	st	Y, r24
	UDR0 = 0;
 3be:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <uart_send_char>:
void uart_send_char(char data){
	
	
	
	while(!(UCSR0A & (1<<UDRE0)));   // wait for empty transmit buffer
 3c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3cc:	95 ff       	sbrs	r25, 5
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <uart_send_char>
	UDR0 = data;                //then send data
 3d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3d4:	08 95       	ret

000003d6 <__udivmodsi4>:
 3d6:	a1 e2       	ldi	r26, 0x21	; 33
 3d8:	1a 2e       	mov	r1, r26
 3da:	aa 1b       	sub	r26, r26
 3dc:	bb 1b       	sub	r27, r27
 3de:	fd 01       	movw	r30, r26
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <__udivmodsi4_ep>

000003e2 <__udivmodsi4_loop>:
 3e2:	aa 1f       	adc	r26, r26
 3e4:	bb 1f       	adc	r27, r27
 3e6:	ee 1f       	adc	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	a2 17       	cp	r26, r18
 3ec:	b3 07       	cpc	r27, r19
 3ee:	e4 07       	cpc	r30, r20
 3f0:	f5 07       	cpc	r31, r21
 3f2:	20 f0       	brcs	.+8      	; 0x3fc <__udivmodsi4_ep>
 3f4:	a2 1b       	sub	r26, r18
 3f6:	b3 0b       	sbc	r27, r19
 3f8:	e4 0b       	sbc	r30, r20
 3fa:	f5 0b       	sbc	r31, r21

000003fc <__udivmodsi4_ep>:
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a 94       	dec	r1
 406:	69 f7       	brne	.-38     	; 0x3e2 <__udivmodsi4_loop>
 408:	60 95       	com	r22
 40a:	70 95       	com	r23
 40c:	80 95       	com	r24
 40e:	90 95       	com	r25
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	bd 01       	movw	r22, r26
 416:	cf 01       	movw	r24, r30
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
