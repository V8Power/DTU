
projekt30082.CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800200  00800200  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001214  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee8  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000782  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000412  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c1       	rjmp	.+630    	; 0x2dc <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ed       	ldi	r30, 0xD4	; 212
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 32       	cpi	r26, 0x20	; 32
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	52 d0       	rcall	.+164    	; 0x1c4 <main>
 120:	57 c1       	rjmp	.+686    	; 0x3d0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <micros>:
uint8_t data_ok = 0;
uint8_t freq = 0;
uint8_t shape = 0;
uint8_t ampl = 0;
uint32_t micros(){
	return micro;
 124:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <micro>
 128:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <micro+0x1>
 12c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <micro+0x2>
 130:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <micro+0x3>
}
 134:	08 95       	ret

00000136 <__vector_17>:
ISR(TIMER1_COMPA_vect){     //interrupt every 1ms, set through timer prescale and counter compare
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	
	micro++;
 148:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <micro>
 14c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <micro+0x1>
 150:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <micro+0x2>
 154:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <micro+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <micro>
 162:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <micro+0x1>
 166:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <micro+0x2>
 16a:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <micro+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 16e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 172:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <init>:


void init(){
	DDRB |= (1 << PB7);
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB6);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 64       	ori	r24, 0x40	; 64
 192:	85 b9       	out	0x05, r24	; 5
	
	
	TCNT1 = 0x0000; // timer1 counter reset
 194:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 198:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	83 60       	ori	r24, 0x03	; 3
 1a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC  operation mode
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 1ac:	ef e6       	ldi	r30, 0x6F	; 111
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	
	OCR1AH = 0x00;
 1b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	//OCR1AL = 0xFA; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	
	sei();
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <main>:
}
int main (void){
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	28 97       	sbiw	r28, 0x08	; 8
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	
	init();
 1d8:	d7 df       	rcall	.-82     	; 0x188 <init>
	SPI_init_master(0,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	58 d0       	rcall	.+176    	; 0x290 <SPI_init_master>
	uart_init(115200);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	72 ec       	ldi	r23, 0xC2	; 194
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1){
		if (micros() - prev_cycle_time >= 1){
 1e8:	a5 d0       	rcall	.+330    	; 0x334 <uart_init>
 1ea:	9c df       	rcall	.-200    	; 0x124 <micros>
 1ec:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f0:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 1f8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 1fc:	60 17       	cp	r22, r16
 1fe:	71 07       	cpc	r23, r17
 200:	82 07       	cpc	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	91 f3       	breq	.-28     	; 0x1ea <main+0x26>
			prev_cycle_time = micros();
 206:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__DATA_REGION_ORIGIN__>
 20a:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 20e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 212:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
				}
			}*/
			//a++;
			//SPI_read_data[9] = 0xAA ^ 0xFF ^ 0x21 ^ 0x23 ^ 0x61;
			
			uint8_t spi_out[8] = {0xDC, 0xCA, 0x01, 0xFF, 0xea, 0x98, 0x00};
 216:	fe 01       	movw	r30, r28
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	df 01       	movw	r26, r30
 21e:	1d 92       	st	X+, r1
 220:	8a 95       	dec	r24
 222:	e9 f7       	brne	.-6      	; 0x21e <main+0x5a>
 224:	8c ed       	ldi	r24, 0xDC	; 220
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	8a ec       	ldi	r24, 0xCA	; 202
 22a:	8a 83       	std	Y+2, r24	; 0x02
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	8b 83       	std	Y+3, r24	; 0x03
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	8c 83       	std	Y+4, r24	; 0x04
 234:	8a ee       	ldi	r24, 0xEA	; 234
 236:	8d 83       	std	Y+5, r24	; 0x05
 238:	88 e9       	ldi	r24, 0x98	; 152
 23a:	8e 83       	std	Y+6, r24	; 0x06
				
			if (a > 8){
 23c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 240:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <a+0x1>
 244:	09 97       	sbiw	r24, 0x09	; 9
 246:	d0 f0       	brcs	.+52     	; 0x27c <main+0xb8>
				a = 0;
 248:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <a+0x1>
 24c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <a>
				for (int v = 0; v < 8 ; v++){
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	10 c0       	rjmp	.+32     	; 0x276 <main+0xb2>
					PORTB &= ~(1 << PB0);
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	85 b9       	out	0x05, r24	; 5
					SPI_write(spi_out[v]);
 25c:	e1 e0       	ldi	r30, 0x01	; 1
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ec 0f       	add	r30, r28
 262:	fd 1f       	adc	r31, r29
 264:	e0 0f       	add	r30, r16
 266:	f1 1f       	adc	r31, r17
 268:	80 81       	ld	r24, Z
 26a:	33 d0       	rcall	.+102    	; 0x2d2 <SPI_write>
					PORTB |= (1 << PB0);
 26c:	85 b1       	in	r24, 0x05	; 5
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	85 b9       	out	0x05, r24	; 5
			
			uint8_t spi_out[8] = {0xDC, 0xCA, 0x01, 0xFF, 0xea, 0x98, 0x00};
				
			if (a > 8){
				a = 0;
				for (int v = 0; v < 8 ; v++){
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	08 30       	cpi	r16, 0x08	; 8
 278:	11 05       	cpc	r17, r1
 27a:	6c f3       	brlt	.-38     	; 0x256 <main+0x92>
			shape |= test & 0xFF;
			uart_send_char(data_ok);
			uart_send_char(freq);
			uart_send_char(ampl);
			uart_send_char(shape);  */
			a++;;
 27c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 280:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <a+0x1>
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <a+0x1>
 28a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <a>
 28e:	ad cf       	rjmp	.-166    	; 0x1ea <main+0x26>

00000290 <SPI_init_master>:
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 290:	96 2f       	mov	r25, r22
 292:	24 b1       	in	r18, 0x04	; 4
 294:	27 60       	ori	r18, 0x07	; 7
 296:	24 b9       	out	0x04, r18	; 4
 298:	25 b1       	in	r18, 0x05	; 5
 29a:	21 60       	ori	r18, 0x01	; 1
 29c:	25 b9       	out	0x05, r18	; 5
 29e:	25 b1       	in	r18, 0x05	; 5
 2a0:	28 60       	ori	r18, 0x08	; 8
 2a2:	25 b9       	out	0x05, r18	; 5
 2a4:	1c bc       	out	0x2c, r1	; 44
 2a6:	2c b5       	in	r18, 0x2c	; 44
 2a8:	68 2f       	mov	r22, r24
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	ab 01       	movw	r20, r22
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	69 2f       	mov	r22, r25
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	64 2b       	or	r22, r20
 2c8:	62 2b       	or	r22, r18
 2ca:	62 65       	ori	r22, 0x52	; 82
 2cc:	6c bd       	out	0x2c, r22	; 44
 2ce:	1e bc       	out	0x2e, r1	; 46
 2d0:	08 95       	ret

000002d2 <SPI_write>:


void SPI_write(unsigned char data){
	
	//PORTB &= ~(1 << PB0);
	SPDR = data;
 2d2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 2d4:	0d b4       	in	r0, 0x2d	; 45
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <SPI_write+0x2>
	 
	//PORTB |= (1 << PB0);
	
	
	
}
 2da:	08 95       	ret

000002dc <__vector_25>:
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0b b6       	in	r0, 0x3b	; 59
 2e8:	0f 92       	push	r0
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <i>
 2f6:	84 31       	cpi	r24, 0x14	; 20
 2f8:	68 f4       	brcc	.+26     	; 0x314 <__vector_25+0x38>
 2fa:	e8 2f       	mov	r30, r24
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 302:	e4 5f       	subi	r30, 0xF4	; 244
 304:	fd 4f       	sbci	r31, 0xFD	; 253
 306:	90 83       	st	Z, r25
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <i>
 30e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uart0_full>
 312:	05 c0       	rjmp	.+10     	; 0x31e <__vector_25+0x42>
 314:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <i>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uart0_full>
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <uart_init>:
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	c1 ec       	ldi	r28, 0xC1	; 193
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	28 81       	ld	r18, Y
 33e:	28 61       	ori	r18, 0x18	; 24
 340:	28 83       	st	Y, r18
 342:	e0 ec       	ldi	r30, 0xC0	; 192
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	20 81       	ld	r18, Z
 348:	22 60       	ori	r18, 0x02	; 2
 34a:	20 83       	st	Z, r18
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	21 50       	subi	r18, 0x01	; 1
 352:	31 09       	sbc	r19, r1
 354:	41 09       	sbc	r20, r1
 356:	51 09       	sbc	r21, r1
 358:	60 e8       	ldi	r22, 0x80	; 128
 35a:	74 e8       	ldi	r23, 0x84	; 132
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	15 d0       	rcall	.+42     	; 0x38c <__udivmodsi4>
 362:	bb 27       	eor	r27, r27
 364:	a5 2f       	mov	r26, r21
 366:	94 2f       	mov	r25, r20
 368:	83 2f       	mov	r24, r19
 36a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 36e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 372:	e2 ec       	ldi	r30, 0xC2	; 194
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	86 60       	ori	r24, 0x06	; 6
 37a:	80 83       	st	Z, r24
 37c:	88 81       	ld	r24, Y
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	88 83       	st	Y, r24
 382:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <__udivmodsi4>:
 38c:	a1 e2       	ldi	r26, 0x21	; 33
 38e:	1a 2e       	mov	r1, r26
 390:	aa 1b       	sub	r26, r26
 392:	bb 1b       	sub	r27, r27
 394:	fd 01       	movw	r30, r26
 396:	0d c0       	rjmp	.+26     	; 0x3b2 <__udivmodsi4_ep>

00000398 <__udivmodsi4_loop>:
 398:	aa 1f       	adc	r26, r26
 39a:	bb 1f       	adc	r27, r27
 39c:	ee 1f       	adc	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	a2 17       	cp	r26, r18
 3a2:	b3 07       	cpc	r27, r19
 3a4:	e4 07       	cpc	r30, r20
 3a6:	f5 07       	cpc	r31, r21
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <__udivmodsi4_ep>
 3aa:	a2 1b       	sub	r26, r18
 3ac:	b3 0b       	sbc	r27, r19
 3ae:	e4 0b       	sbc	r30, r20
 3b0:	f5 0b       	sbc	r31, r21

000003b2 <__udivmodsi4_ep>:
 3b2:	66 1f       	adc	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	1a 94       	dec	r1
 3bc:	69 f7       	brne	.-38     	; 0x398 <__udivmodsi4_loop>
 3be:	60 95       	com	r22
 3c0:	70 95       	com	r23
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	9b 01       	movw	r18, r22
 3c8:	ac 01       	movw	r20, r24
 3ca:	bd 01       	movw	r22, r26
 3cc:	cf 01       	movw	r24, r30
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
