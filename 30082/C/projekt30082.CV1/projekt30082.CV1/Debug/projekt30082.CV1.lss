
projekt30082.CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800200  00800200  000003e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104c  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1e  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  000029bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000215  00000000  00000000  00003183  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	08 c1       	rjmp	.+528    	; 0x276 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 31       	cpi	r26, 0x1F	; 31
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4f d0       	rcall	.+158    	; 0x1be <main>
 120:	24 c1       	rjmp	.+584    	; 0x36a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <millis>:
//timers
uint16_t cycle_time = 1;
uint32_t prev_cycle_time = 0;

uint32_t millis(){
	return milli;
 124:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <milli>
 128:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <milli+0x1>
 12c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <milli+0x2>
 130:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <milli+0x3>
}
 134:	08 95       	ret

00000136 <__vector_17>:
ISR(TIMER1_COMPA_vect){     //interrupt every 1ms, set through timer prescale and counter compare
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	
	milli++;           
 148:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <milli>
 14c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <milli+0x1>
 150:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <milli+0x2>
 154:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <milli+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <milli>
 162:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <milli+0x1>
 166:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <milli+0x2>
 16a:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <milli+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 16e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 172:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <init>:


void init(){
	DDRB |= (1 << PB7);  
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 b9       	out	0x04, r24	; 4
	
	
	
	TCNT1 = 0x0000; // timer1 counter reset
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 196:	e1 e8       	ldi	r30, 0x81	; 129
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	83 60       	ori	r24, 0x03	; 3
 19e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC  operation mode
 1a0:	80 81       	ld	r24, Z
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 1a6:	ef e6       	ldi	r30, 0x6F	; 111
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 83       	st	Z, r24
	
	OCR1AH = 0x00;
 1b0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	OCR1AL = 0xFA; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 1b4:	8a ef       	ldi	r24, 0xFA	; 250
 1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	
	sei();
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <main>:
}
int main (void){
	
	init();
 1be:	e4 df       	rcall	.-56     	; 0x188 <init>
	SPI_init_master(0,0);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	2c d0       	rcall	.+88     	; 0x21e <SPI_init_master>
	uart_init(19200);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	7b e4       	ldi	r23, 0x4B	; 75
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1){
		if (millis() - prev_cycle_time >= 20){    
 1ce:	7f d0       	rcall	.+254    	; 0x2ce <uart_init>
 1d0:	a9 df       	rcall	.-174    	; 0x124 <millis>
 1d2:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d6:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 1de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
 1e6:	c0 1a       	sub	r12, r16
 1e8:	d1 0a       	sbc	r13, r17
 1ea:	e2 0a       	sbc	r14, r18
 1ec:	f3 0a       	sbc	r15, r19
 1ee:	97 01       	movw	r18, r14
 1f0:	86 01       	movw	r16, r12
 1f2:	04 31       	cpi	r16, 0x14	; 20
 1f4:	11 05       	cpc	r17, r1
 1f6:	21 05       	cpc	r18, r1
 1f8:	31 05       	cpc	r19, r1
 1fa:	50 f3       	brcs	.-44     	; 0x1d0 <main+0x12>
				prev_cycle_time = millis();
 1fc:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__DATA_REGION_ORIGIN__>
 200:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 204:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 208:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
				
				//SPI_write(0xC3);
				SPI_write(a);
 20c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 210:	27 d0       	rcall	.+78     	; 0x260 <SPI_write>
				a++;
 212:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <a>
 21c:	d9 cf       	rjmp	.-78     	; 0x1d0 <main+0x12>

0000021e <SPI_init_master>:
	return data;
	PORTB |= (1 << PB0);
	
	
	
}
 21e:	96 2f       	mov	r25, r22
 220:	24 b1       	in	r18, 0x04	; 4
 222:	27 60       	ori	r18, 0x07	; 7
 224:	24 b9       	out	0x04, r18	; 4
 226:	25 b1       	in	r18, 0x05	; 5
 228:	2e 7f       	andi	r18, 0xFE	; 254
 22a:	25 b9       	out	0x05, r18	; 5
 22c:	25 b1       	in	r18, 0x05	; 5
 22e:	28 60       	ori	r18, 0x08	; 8
 230:	25 b9       	out	0x05, r18	; 5
 232:	1c bc       	out	0x2c, r1	; 44
 234:	2c b5       	in	r18, 0x2c	; 44
 236:	68 2f       	mov	r22, r24
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	ab 01       	movw	r20, r22
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	69 2f       	mov	r22, r25
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	64 2b       	or	r22, r20
 256:	62 2b       	or	r22, r18
 258:	62 65       	ori	r22, 0x52	; 82
 25a:	6c bd       	out	0x2c, r22	; 44
 25c:	1e bc       	out	0x2e, r1	; 46
 25e:	08 95       	ret

00000260 <SPI_write>:



void SPI_write(unsigned char data){
	
	PORTB &= ~(1 << PB0);
 260:	95 b1       	in	r25, 0x05	; 5
 262:	9e 7f       	andi	r25, 0xFE	; 254
 264:	95 b9       	out	0x05, r25	; 5
	SPDR = data;
 266:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 268:	0d b4       	in	r0, 0x2d	; 45
 26a:	07 fe       	sbrs	r0, 7
 26c:	fd cf       	rjmp	.-6      	; 0x268 <SPI_write+0x8>
	 
	PORTB |= (1 << PB0);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	81 60       	ori	r24, 0x01	; 1
 272:	85 b9       	out	0x05, r24	; 5
 274:	08 95       	ret

00000276 <__vector_25>:
char uart0_in [20];
uint8_t i = 0;
//volatile char char_dat;
uint8_t uart0_full = 0;

ISR(USART0_RX_vect){      //rx interrupt
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	0b b6       	in	r0, 0x3b	; 59
 282:	0f 92       	push	r0
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	if (i <=19){    //buffer not full, read data
 28c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <i>
 290:	84 31       	cpi	r24, 0x14	; 20
 292:	68 f4       	brcc	.+26     	; 0x2ae <__vector_25+0x38>
	uart0_in[i] = UDR0;
 294:	e8 2f       	mov	r30, r24
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 29c:	e5 5f       	subi	r30, 0xF5	; 245
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	90 83       	st	Z, r25
	i++;
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <i>
	uart0_full = 0;
 2a8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <uart0_full>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__vector_25+0x42>
	}
	else {  //buffer full, ignore data and set flag
		i = 0;
 2ae:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <i>
		uart0_full = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <uart0_full>
	}
	//PORTB |= (1 << PB7);
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0b be       	out	0x3b, r0	; 59
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <uart_init>:


void uart_init(uint32_t baud){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   //enable RX, TX
 2d2:	c1 ec       	ldi	r28, 0xC1	; 193
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	28 81       	ld	r18, Y
 2d8:	28 61       	ori	r18, 0x18	; 24
 2da:	28 83       	st	Y, r18
UCSR0A |= (1 << U2X0);              
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	20 81       	ld	r18, Z
 2e2:	22 60       	ori	r18, 0x02	; 2
 2e4:	20 83       	st	Z, r18
//baud = 115200;
UBRR0H = (16000000/8/(baud-1)) >> 8;             //set baudrate high bits
 2e6:	9b 01       	movw	r18, r22
 2e8:	ac 01       	movw	r20, r24
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	31 09       	sbc	r19, r1
 2ee:	41 09       	sbc	r20, r1
 2f0:	51 09       	sbc	r21, r1
 2f2:	60 e8       	ldi	r22, 0x80	; 128
 2f4:	74 e8       	ldi	r23, 0x84	; 132
 2f6:	8e e1       	ldi	r24, 0x1E	; 30
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	15 d0       	rcall	.+42     	; 0x326 <__udivmodsi4>
 2fc:	bb 27       	eor	r27, r27
 2fe:	a5 2f       	mov	r26, r21
 300:	94 2f       	mov	r25, r20
 302:	83 2f       	mov	r24, r19
 304:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
UBRR0L = 16000000/8/(baud-1);                     //set baudrate low byte
 308:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
UCSR0C |= (1 << UCSZ00) | (1 <<  UCSZ01);
 30c:	e2 ec       	ldi	r30, 0xC2	; 194
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	86 60       	ori	r24, 0x06	; 6
 314:	80 83       	st	Z, r24
UCSR0B |= (1 << RXCIE0);                   //enable rx interrupt
 316:	88 81       	ld	r24, Y
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	88 83       	st	Y, r24
UDR0 = 0;
 31c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <__udivmodsi4>:
 326:	a1 e2       	ldi	r26, 0x21	; 33
 328:	1a 2e       	mov	r1, r26
 32a:	aa 1b       	sub	r26, r26
 32c:	bb 1b       	sub	r27, r27
 32e:	fd 01       	movw	r30, r26
 330:	0d c0       	rjmp	.+26     	; 0x34c <__udivmodsi4_ep>

00000332 <__udivmodsi4_loop>:
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	ee 1f       	adc	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	a2 17       	cp	r26, r18
 33c:	b3 07       	cpc	r27, r19
 33e:	e4 07       	cpc	r30, r20
 340:	f5 07       	cpc	r31, r21
 342:	20 f0       	brcs	.+8      	; 0x34c <__udivmodsi4_ep>
 344:	a2 1b       	sub	r26, r18
 346:	b3 0b       	sbc	r27, r19
 348:	e4 0b       	sbc	r30, r20
 34a:	f5 0b       	sbc	r31, r21

0000034c <__udivmodsi4_ep>:
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	1a 94       	dec	r1
 356:	69 f7       	brne	.-38     	; 0x332 <__udivmodsi4_loop>
 358:	60 95       	com	r22
 35a:	70 95       	com	r23
 35c:	80 95       	com	r24
 35e:	90 95       	com	r25
 360:	9b 01       	movw	r18, r22
 362:	ac 01       	movw	r20, r24
 364:	bd 01       	movw	r22, r26
 366:	cf 01       	movw	r24, r30
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
