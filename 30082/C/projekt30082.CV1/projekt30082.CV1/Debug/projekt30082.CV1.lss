
projekt30082.CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800214  00800214  00000472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001117  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e64  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00002517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c4  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c1       	rjmp	.+606    	; 0x2c4 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 33       	cpi	r26, 0x33	; 51
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4f d0       	rcall	.+158    	; 0x1be <main>
 120:	52 c1       	rjmp	.+676    	; 0x3c6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <micros>:
//timers
uint16_t cycle_time = 1;
uint32_t prev_cycle_time = 0;

uint32_t micros(){
	return micro;
 124:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <micro>
 128:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <micro+0x1>
 12c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <micro+0x2>
 130:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <micro+0x3>
}
 134:	08 95       	ret

00000136 <__vector_17>:
ISR(TIMER1_COMPA_vect){     //interrupt every 1ms, set through timer prescale and counter compare
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	
	micro++;           
 148:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <micro>
 14c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <micro+0x1>
 150:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <micro+0x2>
 154:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <micro+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <micro>
 162:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <micro+0x1>
 166:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <micro+0x2>
 16a:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <micro+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 16e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 172:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <init>:


void init(){
	DDRB |= (1 << PB7);  
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 b9       	out	0x04, r24	; 4
	
	
	
	TCNT1 = 0x0000; // timer1 counter reset
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 196:	e1 e8       	ldi	r30, 0x81	; 129
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	83 60       	ori	r24, 0x03	; 3
 19e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC  operation mode
 1a0:	80 81       	ld	r24, Z
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 1a6:	ef e6       	ldi	r30, 0x6F	; 111
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 83       	st	Z, r24
	
	OCR1AH = 0x00;
 1b0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	//OCR1AL = 0xFA; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 1b4:	88 e1       	ldi	r24, 0x18	; 24
 1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	
	sei();
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <main>:
}
int main (void){
	
	init();
 1be:	e4 df       	rcall	.-56     	; 0x188 <init>
	SPI_init_master(0,0);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	53 d0       	rcall	.+166    	; 0x26c <SPI_init_master>
	uart_init(115200);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	72 ec       	ldi	r23, 0xC2	; 194
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1){
		if (micros() - prev_cycle_time >= 1000){    
 1ce:	a6 d0       	rcall	.+332    	; 0x31c <uart_init>
 1d0:	a9 df       	rcall	.-174    	; 0x124 <micros>
 1d2:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <__data_end>
 1d6:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <__data_end+0x1>
 1da:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__data_end+0x2>
 1de:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__data_end+0x3>
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
 1e6:	c0 1a       	sub	r12, r16
 1e8:	d1 0a       	sbc	r13, r17
 1ea:	e2 0a       	sbc	r14, r18
 1ec:	f3 0a       	sbc	r15, r19
 1ee:	48 ee       	ldi	r20, 0xE8	; 232
 1f0:	c4 16       	cp	r12, r20
 1f2:	43 e0       	ldi	r20, 0x03	; 3
 1f4:	d4 06       	cpc	r13, r20
 1f6:	e1 04       	cpc	r14, r1
 1f8:	f1 04       	cpc	r15, r1
 1fa:	50 f3       	brcs	.-44     	; 0x1d0 <main+0x12>
				prev_cycle_time = micros();
 1fc:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end>
 200:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x1>
 204:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end+0x2>
 208:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__data_end+0x3>
				if (a == 20){
 20c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <a>
 210:	84 31       	cpi	r24, 0x14	; 20
				SPI_write(0x5);
 212:	19 f4       	brne	.+6      	; 0x21a <main+0x5c>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	4b d0       	rcall	.+150    	; 0x2ae <SPI_write>
				}
				
				else if (a == 40){
 218:	13 c0       	rjmp	.+38     	; 0x240 <main+0x82>
 21a:	88 32       	cpi	r24, 0x28	; 40
				SPI_write(0xFE);
 21c:	19 f4       	brne	.+6      	; 0x224 <main+0x66>
 21e:	8e ef       	ldi	r24, 0xFE	; 254
 220:	46 d0       	rcall	.+140    	; 0x2ae <SPI_write>
				}
				else if (a == 60){
 222:	0e c0       	rjmp	.+28     	; 0x240 <main+0x82>
 224:	8c 33       	cpi	r24, 0x3C	; 60
				SPI_write((0x03));
 226:	19 f4       	brne	.+6      	; 0x22e <main+0x70>
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	41 d0       	rcall	.+130    	; 0x2ae <SPI_write>
				}
				else if (a == 80){
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x82>
				SPI_write(0xFF);
 22e:	80 35       	cpi	r24, 0x50	; 80
 230:	19 f4       	brne	.+6      	; 0x238 <main+0x7a>
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	3c d0       	rcall	.+120    	; 0x2ae <SPI_write>
				}
				else if (a == 100){
 236:	04 c0       	rjmp	.+8      	; 0x240 <main+0x82>
 238:	84 36       	cpi	r24, 0x64	; 100
				uint8_t checksum = 0x05 ^ 0xFE ^ 0x03 ^ 0xFF;
				SPI_write(checksum);
 23a:	11 f4       	brne	.+4      	; 0x240 <main+0x82>
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	37 d0       	rcall	.+110    	; 0x2ae <SPI_write>
				}
				a++;
 240:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <a>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <a>
				if (a== 130){
 24a:	82 38       	cpi	r24, 0x82	; 130
 24c:	11 f4       	brne	.+4      	; 0x252 <main+0x94>
					a=0;
 24e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <a>
	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
	
	
	sei();
}
int main (void){
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
				a++;
				if (a== 130){
					a=0;
				}
				for (int v = 0; v < 20; v++){
				uart_send_char(test_data[v]);
 256:	06 c0       	rjmp	.+12     	; 0x264 <main+0xa6>
 258:	fe 01       	movw	r30, r28
 25a:	e0 50       	subi	r30, 0x00	; 0
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 81       	ld	r24, Z
 260:	89 d0       	rcall	.+274    	; 0x374 <uart_send_char>
				}
				a++;
				if (a== 130){
					a=0;
				}
				for (int v = 0; v < 20; v++){
 262:	21 96       	adiw	r28, 0x01	; 1
 264:	c4 31       	cpi	r28, 0x14	; 20
 266:	d1 05       	cpc	r29, r1
 268:	bc f3       	brlt	.-18     	; 0x258 <main+0x9a>
 26a:	b2 cf       	rjmp	.-156    	; 0x1d0 <main+0x12>

0000026c <SPI_init_master>:
 26c:	96 2f       	mov	r25, r22
 26e:	24 b1       	in	r18, 0x04	; 4
 270:	27 60       	ori	r18, 0x07	; 7
 272:	24 b9       	out	0x04, r18	; 4
 274:	25 b1       	in	r18, 0x05	; 5
 276:	2e 7f       	andi	r18, 0xFE	; 254
 278:	25 b9       	out	0x05, r18	; 5
 27a:	25 b1       	in	r18, 0x05	; 5
 27c:	28 60       	ori	r18, 0x08	; 8
 27e:	25 b9       	out	0x05, r18	; 5
 280:	1c bc       	out	0x2c, r1	; 44
 282:	2c b5       	in	r18, 0x2c	; 44
 284:	68 2f       	mov	r22, r24
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	ab 01       	movw	r20, r22
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	69 2f       	mov	r22, r25
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	64 2b       	or	r22, r20
 2a4:	62 2b       	or	r22, r18
 2a6:	62 65       	ori	r22, 0x52	; 82
 2a8:	6c bd       	out	0x2c, r22	; 44
 2aa:	1e bc       	out	0x2e, r1	; 46
 2ac:	08 95       	ret

000002ae <SPI_write>:
 2ae:	95 b1       	in	r25, 0x05	; 5
 2b0:	9e 7f       	andi	r25, 0xFE	; 254
 2b2:	95 b9       	out	0x05, r25	; 5
 2b4:	8e bd       	out	0x2e, r24	; 46
 2b6:	0d b4       	in	r0, 0x2d	; 45
 2b8:	07 fe       	sbrs	r0, 7
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <SPI_write+0x8>
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	08 95       	ret

000002c4 <__vector_25>:
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <i>
 2de:	84 31       	cpi	r24, 0x14	; 20
 2e0:	68 f4       	brcc	.+26     	; 0x2fc <__vector_25+0x38>
 2e2:	e8 2f       	mov	r30, r24
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2ea:	e1 5e       	subi	r30, 0xE1	; 225
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	90 83       	st	Z, r25
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <i>
 2f6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <uart0_full>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <__vector_25+0x42>
 2fc:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <i>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <uart0_full>
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	0f 90       	pop	r0
 310:	0b be       	out	0x3b, r0	; 59
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <uart_init>:
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	c1 ec       	ldi	r28, 0xC1	; 193
 322:	d0 e0       	ldi	r29, 0x00	; 0
 324:	28 81       	ld	r18, Y
 326:	28 61       	ori	r18, 0x18	; 24
 328:	28 83       	st	Y, r18
 32a:	e0 ec       	ldi	r30, 0xC0	; 192
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	20 81       	ld	r18, Z
 330:	22 60       	ori	r18, 0x02	; 2
 332:	20 83       	st	Z, r18
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	31 09       	sbc	r19, r1
 33c:	41 09       	sbc	r20, r1
 33e:	51 09       	sbc	r21, r1
 340:	60 e8       	ldi	r22, 0x80	; 128
 342:	74 e8       	ldi	r23, 0x84	; 132
 344:	8e e1       	ldi	r24, 0x1E	; 30
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	1c d0       	rcall	.+56     	; 0x382 <__udivmodsi4>
 34a:	bb 27       	eor	r27, r27
 34c:	a5 2f       	mov	r26, r21
 34e:	94 2f       	mov	r25, r20
 350:	83 2f       	mov	r24, r19
 352:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 356:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 35a:	e2 ec       	ldi	r30, 0xC2	; 194
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	86 60       	ori	r24, 0x06	; 6
 362:	80 83       	st	Z, r24
 364:	88 81       	ld	r24, Y
 366:	80 68       	ori	r24, 0x80	; 128
 368:	88 83       	st	Y, r24
 36a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <uart_send_char>:
 374:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 378:	95 ff       	sbrs	r25, 5
 37a:	fc cf       	rjmp	.-8      	; 0x374 <uart_send_char>
 37c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 380:	08 95       	ret

00000382 <__udivmodsi4>:
 382:	a1 e2       	ldi	r26, 0x21	; 33
 384:	1a 2e       	mov	r1, r26
 386:	aa 1b       	sub	r26, r26
 388:	bb 1b       	sub	r27, r27
 38a:	fd 01       	movw	r30, r26
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <__udivmodsi4_ep>

0000038e <__udivmodsi4_loop>:
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	ee 1f       	adc	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	a2 17       	cp	r26, r18
 398:	b3 07       	cpc	r27, r19
 39a:	e4 07       	cpc	r30, r20
 39c:	f5 07       	cpc	r31, r21
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__udivmodsi4_ep>
 3a0:	a2 1b       	sub	r26, r18
 3a2:	b3 0b       	sbc	r27, r19
 3a4:	e4 0b       	sbc	r30, r20
 3a6:	f5 0b       	sbc	r31, r21

000003a8 <__udivmodsi4_ep>:
 3a8:	66 1f       	adc	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	1a 94       	dec	r1
 3b2:	69 f7       	brne	.-38     	; 0x38e <__udivmodsi4_loop>
 3b4:	60 95       	com	r22
 3b6:	70 95       	com	r23
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	bd 01       	movw	r22, r26
 3c2:	cf 01       	movw	r24, r30
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
