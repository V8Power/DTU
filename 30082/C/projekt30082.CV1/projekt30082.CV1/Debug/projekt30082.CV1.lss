
projekt30082.CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000057a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800200  00800200  0000057a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122c  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed4  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000718  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040b  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	cd c1       	rjmp	.+922    	; 0x400 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e0       	ldi	r30, 0x06	; 6
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 32       	cpi	r26, 0x24	; 36
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	52 d0       	rcall	.+164    	; 0x1c4 <main>
 120:	f0 c1       	rjmp	.+992    	; 0x502 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <micros>:
uint8_t data_ok = 0;
uint8_t freq = 0;
uint8_t shape = 0;
uint8_t ampl = 0;
uint32_t micros(){
	return micro;
 124:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <micro>
 128:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <micro+0x1>
 12c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <micro+0x2>
 130:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <micro+0x3>
}
 134:	08 95       	ret

00000136 <__vector_17>:
ISR(TIMER1_COMPA_vect){     //interrupt every 1ms, set through timer prescale and counter compare
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	
	micro++;
 148:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <micro>
 14c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <micro+0x1>
 150:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <micro+0x2>
 154:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <micro+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <micro>
 162:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <micro+0x1>
 166:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <micro+0x2>
 16a:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <micro+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 16e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 172:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <init>:


void init(){
	DDRB |= (1 << PB7);
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB6);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 64       	ori	r24, 0x40	; 64
 192:	85 b9       	out	0x05, r24	; 5
	
	
	TCNT1 = 0x0000; // timer1 counter reset
 194:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 198:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	83 60       	ori	r24, 0x03	; 3
 1a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC  operation mode
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 1ac:	ef e6       	ldi	r30, 0x6F	; 111
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	
	OCR1AH = 0x00;
 1b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	//OCR1AL = 0xFA; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	
	sei();
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <main>:
}
int main (void){
	
	init();
 1c4:	e1 df       	rcall	.-62     	; 0x188 <init>
	SPI_init_master(0,0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	5a d0       	rcall	.+180    	; 0x280 <SPI_init_master>
	uart_init(115200);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	72 ec       	ldi	r23, 0xC2	; 194
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1){
		if (micros() - prev_cycle_time >= 10000){
 1d4:	41 d1       	rcall	.+642    	; 0x458 <uart_init>
 1d6:	a6 df       	rcall	.-180    	; 0x124 <micros>
 1d8:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <prev_cycle_time>
 1dc:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <prev_cycle_time+0x1>
 1e0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <prev_cycle_time+0x2>
 1e4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <prev_cycle_time+0x3>
 1e8:	6b 01       	movw	r12, r22
 1ea:	7c 01       	movw	r14, r24
 1ec:	c0 1a       	sub	r12, r16
 1ee:	d1 0a       	sbc	r13, r17
 1f0:	e2 0a       	sbc	r14, r18
 1f2:	f3 0a       	sbc	r15, r19
 1f4:	40 e1       	ldi	r20, 0x10	; 16
 1f6:	c4 16       	cp	r12, r20
 1f8:	47 e2       	ldi	r20, 0x27	; 39
 1fa:	d4 06       	cpc	r13, r20
 1fc:	e1 04       	cpc	r14, r1
 1fe:	f1 04       	cpc	r15, r1
 200:	50 f3       	brcs	.-44     	; 0x1d6 <main+0x12>
			prev_cycle_time = micros();
 202:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <prev_cycle_time>
 206:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <prev_cycle_time+0x1>
 20a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <prev_cycle_time+0x2>
 20e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <prev_cycle_time+0x3>
					PORTB |= (1 << PB0);
				}
			}*/
			//a++;
			//SPI_read_data[9] = 0xAA ^ 0xFF ^ 0x21 ^ 0x23 ^ 0x61;
			if (a > 1){
 212:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <a>
 216:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <a+0x1>
 21a:	02 97       	sbiw	r24, 0x02	; 2
 21c:	58 f0       	brcs	.+22     	; 0x234 <main+0x70>
				a = 0;
 21e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <a+0x1>
 222:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <a>
				for (int v = 0; v < 10 ; v++){
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 c0       	rjmp	.+2      	; 0x22e <main+0x6a>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	8a 30       	cpi	r24, 0x0A	; 10
 230:	91 05       	cpc	r25, r1
 232:	e4 f3       	brlt	.-8      	; 0x22c <main+0x68>
					//uart_send_char(SPI_read_data[v]);
					//uart_send_char(v);
				}
				
			}
			data_ok = 0;
 234:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <data_ok>
			freq = 0;
 238:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <freq>
			ampl = 0;
 23c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			shape = 0;
 240:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <shape>
			uint32_t test = 0;
			test = fpga_get_data();
 244:	4f d0       	rcall	.+158    	; 0x2e4 <fpga_get_data>
 246:	98 2f       	mov	r25, r24
			data_ok |= (test >> 24) & 0xFF000000;
 248:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <data_ok>
			freq |= (test >> 16);
 24c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <freq>
 250:	92 2b       	or	r25, r18
 252:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <freq>
			ampl |= (test >> 8); 
 256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 25a:	79 2b       	or	r23, r25
 25c:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <__DATA_REGION_ORIGIN__>
			shape |= test & 0xFF;
 260:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <shape>
 264:	69 2b       	or	r22, r25
			uart_send_char(data_ok);
 266:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <shape>
			uart_send_char(freq);
 26a:	22 d1       	rcall	.+580    	; 0x4b0 <uart_send_char>
 26c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <freq>
			uart_send_char(ampl);
 270:	1f d1       	rcall	.+574    	; 0x4b0 <uart_send_char>
 272:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			uart_send_char(shape);
 276:	1c d1       	rcall	.+568    	; 0x4b0 <uart_send_char>
 278:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <shape>
 27c:	19 d1       	rcall	.+562    	; 0x4b0 <uart_send_char>
 27e:	ab cf       	rjmp	.-170    	; 0x1d6 <main+0x12>

00000280 <SPI_init_master>:
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
	
	
	
	SPCR|= (0 << SPIE) |  ( 1 << SPR1) | (0<< SPR0) | (1 << SPE) | (1<<CPOL) ;
	SPDR = 0;
 280:	96 2f       	mov	r25, r22
 282:	24 b1       	in	r18, 0x04	; 4
 284:	27 60       	ori	r18, 0x07	; 7
 286:	24 b9       	out	0x04, r18	; 4
 288:	25 b1       	in	r18, 0x05	; 5
 28a:	21 60       	ori	r18, 0x01	; 1
 28c:	25 b9       	out	0x05, r18	; 5
 28e:	25 b1       	in	r18, 0x05	; 5
 290:	28 60       	ori	r18, 0x08	; 8
 292:	25 b9       	out	0x05, r18	; 5
 294:	1c bc       	out	0x2c, r1	; 44
 296:	2c b5       	in	r18, 0x2c	; 44
 298:	68 2f       	mov	r22, r24
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	ab 01       	movw	r20, r22
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	69 2f       	mov	r22, r25
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	64 2b       	or	r22, r20
 2b8:	62 2b       	or	r22, r18
 2ba:	62 65       	ori	r22, 0x52	; 82
 2bc:	6c bd       	out	0x2c, r22	; 44
 2be:	1e bc       	out	0x2e, r1	; 46
 2c0:	08 95       	ret

000002c2 <SPI_read>:
}


char SPI_read(){
	//PORTB &= ~(1 << PB0);
	SPDR = 0;
 2c2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR &(1<<SPIF))) ; 
 2c4:	0d b4       	in	r0, 0x2d	; 45
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <SPI_read+0x2>
	unsigned char data = SPDR;
 2ca:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 2cc:	08 95       	ret

000002ce <SPI_read_write>:
unsigned char SPI_read_write(char dat_in){
	//PORTB &= ~(1 << PB0);
	SPDR = dat_in;
 2ce:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 2d0:	0d b4       	in	r0, 0x2d	; 45
 2d2:	07 fe       	sbrs	r0, 7
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <SPI_read_write+0x2>
	unsigned char data = SPDR;
 2d6:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 2d8:	08 95       	ret

000002da <SPI_write>:


void SPI_write(unsigned char data){
	
	//PORTB &= ~(1 << PB0);
	SPDR = data;
 2da:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 2dc:	0d b4       	in	r0, 0x2d	; 45
 2de:	07 fe       	sbrs	r0, 7
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <SPI_write+0x2>
	 
	//PORTB |= (1 << PB0);
	
	
	
}
 2e2:	08 95       	ret

000002e4 <fpga_get_data>:

uint32_t fpga_get_data() {
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	2a 97       	sbiw	r28, 0x0a	; 10
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	3b c0       	rjmp	.+118    	; 0x378 <fpga_get_data+0x94>
		if (d < 4){
 302:	04 30       	cpi	r16, 0x04	; 4
 304:	11 05       	cpc	r17, r1
 306:	4c f4       	brge	.+18     	; 0x31a <fpga_get_data+0x36>
			PORTB &= ~(1 << PB0);
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	85 b9       	out	0x05, r24	; 5
			SPI_write(0xA1);
 30e:	81 ea       	ldi	r24, 0xA1	; 161
 310:	e4 df       	rcall	.-56     	; 0x2da <SPI_write>
			PORTB |= (1 << PB0);
 312:	85 b1       	in	r24, 0x05	; 5
 314:	81 60       	ori	r24, 0x01	; 1
 316:	85 b9       	out	0x05, r24	; 5
 318:	2d c0       	rjmp	.+90     	; 0x374 <fpga_get_data+0x90>
		}
		else if (d == 4) {
 31a:	04 30       	cpi	r16, 0x04	; 4
 31c:	11 05       	cpc	r17, r1
 31e:	49 f4       	brne	.+18     	; 0x332 <fpga_get_data+0x4e>
			PORTB &= ~(1 << PB0);
 320:	85 b1       	in	r24, 0x05	; 5
 322:	8e 7f       	andi	r24, 0xFE	; 254
 324:	85 b9       	out	0x05, r24	; 5
			SPI_read_data[0] = SPI_read_write(0xAA);
 326:	8a ea       	ldi	r24, 0xAA	; 170
 328:	d2 df       	rcall	.-92     	; 0x2ce <SPI_read_write>
			PORTB |= (1 << PB0);
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	85 b9       	out	0x05, r24	; 5
 330:	21 c0       	rjmp	.+66     	; 0x374 <fpga_get_data+0x90>
		}
		else if (d == 5){
 332:	05 30       	cpi	r16, 0x05	; 5
 334:	11 05       	cpc	r17, r1
 336:	51 f4       	brne	.+20     	; 0x34c <fpga_get_data+0x68>
			PORTB &= ~(1 << PB0);
 338:	85 b1       	in	r24, 0x05	; 5
 33a:	8e 7f       	andi	r24, 0xFE	; 254
			
			SPI_read_data[2] = SPI_read_write(0xAA);
 33c:	85 b9       	out	0x05, r24	; 5
 33e:	8a ea       	ldi	r24, 0xAA	; 170
 340:	c6 df       	rcall	.-116    	; 0x2ce <SPI_read_write>
 342:	8b 83       	std	Y+3, r24	; 0x03
			
			
			PORTB |= (1 << PB0);
 344:	85 b1       	in	r24, 0x05	; 5
 346:	81 60       	ori	r24, 0x01	; 1
 348:	85 b9       	out	0x05, r24	; 5
 34a:	14 c0       	rjmp	.+40     	; 0x374 <fpga_get_data+0x90>
		}
		else if (d > 4 && d < 14){
 34c:	c8 01       	movw	r24, r16
 34e:	05 97       	sbiw	r24, 0x05	; 5
 350:	09 97       	sbiw	r24, 0x09	; 9
 352:	80 f4       	brcc	.+32     	; 0x374 <fpga_get_data+0x90>
			PORTB &= ~(1 << PB0);
 354:	85 b1       	in	r24, 0x05	; 5
 356:	8e 7f       	andi	r24, 0xFE	; 254
			SPI_read_data[(d - 5)] = SPI_read();
 358:	85 b9       	out	0x05, r24	; 5
 35a:	b3 df       	rcall	.-154    	; 0x2c2 <SPI_read>
 35c:	f8 01       	movw	r30, r16
 35e:	35 97       	sbiw	r30, 0x05	; 5
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	2c 0f       	add	r18, r28
 366:	3d 1f       	adc	r19, r29
 368:	e2 0f       	add	r30, r18
 36a:	f3 1f       	adc	r31, r19
 36c:	80 83       	st	Z, r24
			PORTB |= (1 << PB0);
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	81 60       	ori	r24, 0x01	; 1
 372:	85 b9       	out	0x05, r24	; 5

uint32_t fpga_get_data() {
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 374:	0f 5f       	subi	r16, 0xFF	; 255
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	0e 30       	cpi	r16, 0x0E	; 14
 37a:	11 05       	cpc	r17, r1
 37c:	0c f4       	brge	.+2      	; 0x380 <fpga_get_data+0x9c>
 37e:	c1 cf       	rjmp	.-126    	; 0x302 <fpga_get_data+0x1e>
			PORTB &= ~(1 << PB0);
			SPI_read_data[(d - 5)] = SPI_read();
			PORTB |= (1 << PB0);
		}
	}
	xor8 = SPI_read_data[2] ^ SPI_read_data[3] ^ SPI_read_data[4] ^ SPI_read_data[5] ^  SPI_read_data[6] ;
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	3c 81       	ldd	r19, Y+4	; 0x04
 384:	6d 81       	ldd	r22, Y+5	; 0x05
 386:	4e 81       	ldd	r20, Y+6	; 0x06
 388:	2f 81       	ldd	r18, Y+7	; 0x07
 38a:	89 2f       	mov	r24, r25
 38c:	83 27       	eor	r24, r19
 38e:	86 27       	eor	r24, r22
 390:	84 27       	eor	r24, r20
 392:	82 27       	eor	r24, r18
	if ((xor8 == SPI_read_data[7]) && (SPI_read_data[2] == 0xAA) && (SPI_read_data[3] == 0xFF)){
 394:	58 85       	ldd	r21, Y+8	; 0x08
 396:	85 13       	cpse	r24, r21
 398:	1a c0       	rjmp	.+52     	; 0x3ce <fpga_get_data+0xea>
 39a:	9a 3a       	cpi	r25, 0xAA	; 170
 39c:	e9 f4       	brne	.+58     	; 0x3d8 <fpga_get_data+0xf4>
 39e:	3f 3f       	cpi	r19, 0xFF	; 255
 3a0:	01 f5       	brne	.+64     	; 0x3e2 <fpga_get_data+0xfe>
	
	gen_data |= SPI_read_data[4] ;
 3a2:	86 2f       	mov	r24, r22
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a0 e0       	ldi	r26, 0x00	; 0
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
	gen_data  <<= 16;
 3aa:	dc 01       	movw	r26, r24
 3ac:	99 27       	eor	r25, r25
 3ae:	88 27       	eor	r24, r24
	
	gen_data |= (SPI_read_data[5] << 8);
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	74 2f       	mov	r23, r20
 3b4:	66 27       	eor	r22, r22
 3b6:	ab 01       	movw	r20, r22
 3b8:	77 0f       	add	r23, r23
 3ba:	66 0b       	sbc	r22, r22
 3bc:	77 0b       	sbc	r23, r23
 3be:	84 2b       	or	r24, r20
 3c0:	95 2b       	or	r25, r21
 3c2:	a6 2b       	or	r26, r22
 3c4:	b7 2b       	or	r27, r23
	gen_data |= SPI_read_data[6] ;
 3c6:	bc 01       	movw	r22, r24
 3c8:	cd 01       	movw	r24, r26
 3ca:	62 2b       	or	r22, r18
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <fpga_get_data+0x106>
	}
	else {
		gen_data = 0x37000000;
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	97 e3       	ldi	r25, 0x37	; 55
 3d6:	09 c0       	rjmp	.+18     	; 0x3ea <fpga_get_data+0x106>
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	97 e3       	ldi	r25, 0x37	; 55
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <fpga_get_data+0x106>
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	97 e3       	ldi	r25, 0x37	; 55
	/*for (int v = 0; v < 10 ; v++){
		uart_send_char(SPI_read_data[v]);
		//uart_send_char(v);
	}*/
	return gen_data;
 3ea:	2a 96       	adiw	r28, 0x0a	; 10
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <__vector_25>:
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	0b b6       	in	r0, 0x3b	; 59
 40c:	0f 92       	push	r0
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
 416:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <i>
 41a:	84 31       	cpi	r24, 0x14	; 20
 41c:	68 f4       	brcc	.+26     	; 0x438 <__vector_25+0x38>
 41e:	e8 2f       	mov	r30, r24
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 426:	e0 5f       	subi	r30, 0xF0	; 240
 428:	fd 4f       	sbci	r31, 0xFD	; 253
 42a:	90 83       	st	Z, r25
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <i>
 432:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <uart0_full>
 436:	05 c0       	rjmp	.+10     	; 0x442 <__vector_25+0x42>
 438:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <i>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <uart0_full>
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	0f 90       	pop	r0
 44c:	0b be       	out	0x3b, r0	; 59
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <uart_init>:
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	c1 ec       	ldi	r28, 0xC1	; 193
 45e:	d0 e0       	ldi	r29, 0x00	; 0
 460:	28 81       	ld	r18, Y
 462:	28 61       	ori	r18, 0x18	; 24
 464:	28 83       	st	Y, r18
 466:	e0 ec       	ldi	r30, 0xC0	; 192
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	20 81       	ld	r18, Z
 46c:	22 60       	ori	r18, 0x02	; 2
 46e:	20 83       	st	Z, r18
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	21 50       	subi	r18, 0x01	; 1
 476:	31 09       	sbc	r19, r1
 478:	41 09       	sbc	r20, r1
 47a:	51 09       	sbc	r21, r1
 47c:	60 e8       	ldi	r22, 0x80	; 128
 47e:	74 e8       	ldi	r23, 0x84	; 132
 480:	8e e1       	ldi	r24, 0x1E	; 30
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	1c d0       	rcall	.+56     	; 0x4be <__udivmodsi4>
 486:	bb 27       	eor	r27, r27
 488:	a5 2f       	mov	r26, r21
 48a:	94 2f       	mov	r25, r20
 48c:	83 2f       	mov	r24, r19
 48e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 492:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 496:	e2 ec       	ldi	r30, 0xC2	; 194
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	86 60       	ori	r24, 0x06	; 6
 49e:	80 83       	st	Z, r24
 4a0:	88 81       	ld	r24, Y
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	88 83       	st	Y, r24
 4a6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <uart_send_char>:
 4b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 4b4:	95 ff       	sbrs	r25, 5
 4b6:	fc cf       	rjmp	.-8      	; 0x4b0 <uart_send_char>
 4b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4bc:	08 95       	ret

000004be <__udivmodsi4>:
 4be:	a1 e2       	ldi	r26, 0x21	; 33
 4c0:	1a 2e       	mov	r1, r26
 4c2:	aa 1b       	sub	r26, r26
 4c4:	bb 1b       	sub	r27, r27
 4c6:	fd 01       	movw	r30, r26
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__udivmodsi4_ep>

000004ca <__udivmodsi4_loop>:
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	ee 1f       	adc	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	a2 17       	cp	r26, r18
 4d4:	b3 07       	cpc	r27, r19
 4d6:	e4 07       	cpc	r30, r20
 4d8:	f5 07       	cpc	r31, r21
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__udivmodsi4_ep>
 4dc:	a2 1b       	sub	r26, r18
 4de:	b3 0b       	sbc	r27, r19
 4e0:	e4 0b       	sbc	r30, r20
 4e2:	f5 0b       	sbc	r31, r21

000004e4 <__udivmodsi4_ep>:
 4e4:	66 1f       	adc	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	1a 94       	dec	r1
 4ee:	69 f7       	brne	.-38     	; 0x4ca <__udivmodsi4_loop>
 4f0:	60 95       	com	r22
 4f2:	70 95       	com	r23
 4f4:	80 95       	com	r24
 4f6:	90 95       	com	r25
 4f8:	9b 01       	movw	r18, r22
 4fa:	ac 01       	movw	r20, r24
 4fc:	bd 01       	movw	r22, r26
 4fe:	cf 01       	movw	r24, r30
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
