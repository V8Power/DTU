
projekt30082.CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800200  00800200  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115a  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e66  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fa  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006df  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000258  00000000  00000000  000034df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c1       	rjmp	.+688    	; 0x316 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e1       	ldi	r30, 0x1C	; 28
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 32       	cpi	r26, 0x2A	; 42
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	52 d0       	rcall	.+164    	; 0x1c4 <main>
 120:	7b c1       	rjmp	.+758    	; 0x418 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <micros>:
//timers
uint16_t cycle_time = 1;
uint32_t prev_cycle_time = 0;
char SPI_read_data[10];
uint32_t micros(){
	return micro;
 124:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <micro>
 128:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <micro+0x1>
 12c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <micro+0x2>
 130:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <micro+0x3>
}
 134:	08 95       	ret

00000136 <__vector_17>:
ISR(TIMER1_COMPA_vect){     //interrupt every 1ms, set through timer prescale and counter compare
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	
	micro++;           
 148:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <micro>
 14c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <micro+0x1>
 150:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <micro+0x2>
 154:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <micro+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <micro>
 162:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <micro+0x1>
 166:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <micro+0x2>
 16a:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <micro+0x3>
	TCNT1 = 0x0000;   // reset counter for next COMPA event
 16e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 172:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	//PORTB ^= (1 << PB7);
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <init>:


void init(){
	DDRB |= (1 << PB7);  
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB6);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 64       	ori	r24, 0x40	; 64
 192:	85 b9       	out	0x05, r24	; 5
	
	
	TCNT1 = 0x0000; // timer1 counter reset
 194:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 198:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1B |= (1 << CS11) | (1 << CS10); // clk/64
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	83 60       	ori	r24, 0x03	; 3
 1a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC  operation mode
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 1ac:	ef e6       	ldi	r30, 0x6F	; 111
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	
	OCR1AH = 0x00;
 1b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	//OCR1AL = 0xFA; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
	OCR1AL = 0x18; // 250    247   250 is theoretical val, 247 is checked with oscilloscope
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	
	sei();
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <main>:
}
int main (void){
	
	init();
 1c4:	e1 df       	rcall	.-62     	; 0x188 <init>
	SPI_init_master(0,0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	6a d0       	rcall	.+212    	; 0x2a0 <SPI_init_master>
	uart_init(115200);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	72 ec       	ldi	r23, 0xC2	; 194
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1){
		if (micros() - prev_cycle_time >= 0){    
				prev_cycle_time = micros();
 1d4:	cc d0       	rcall	.+408    	; 0x36e <uart_init>
 1d6:	a6 df       	rcall	.-180    	; 0x124 <micros>
 1d8:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__DATA_REGION_ORIGIN__>
 1dc:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 1e4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
				else {
					SPI_read_data[a-5] = SPI_read();
				}
				a++;
				*/
				if (a < 4){
 1e8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 1ec:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <a+0x1>
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	91 05       	cpc	r25, r1
 1f4:	48 f4       	brcc	.+18     	; 0x208 <main+0x44>
					PORTB &= ~(1 << PB0);
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
					SPI_write(0xA1);
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	81 ea       	ldi	r24, 0xA1	; 161
 1fe:	80 d0       	rcall	.+256    	; 0x300 <SPI_write>
					PORTB |= (1 << PB0);
 200:	85 b1       	in	r24, 0x05	; 5
 202:	81 60       	ori	r24, 0x01	; 1
 204:	85 b9       	out	0x05, r24	; 5
 206:	2e c0       	rjmp	.+92     	; 0x264 <main+0xa0>
				}
				else if (a == 4) {
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	91 05       	cpc	r25, r1
					PORTB &= ~(1 << PB0);
 20c:	59 f4       	brne	.+22     	; 0x224 <main+0x60>
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	8e 7f       	andi	r24, 0xFE	; 254
					SPI_read_data[0] = SPI_read_write(0xAA);
 212:	85 b9       	out	0x05, r24	; 5
 214:	8a ea       	ldi	r24, 0xAA	; 170
 216:	6b d0       	rcall	.+214    	; 0x2ee <SPI_read_write>
 218:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SPI_read_data>
					PORTB |= (1 << PB0);
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	85 b9       	out	0x05, r24	; 5
 222:	20 c0       	rjmp	.+64     	; 0x264 <main+0xa0>
				}
				else if (a == 5){
 224:	85 30       	cpi	r24, 0x05	; 5
 226:	91 05       	cpc	r25, r1
				PORTB &= ~(1 << PB0);
 228:	59 f4       	brne	.+22     	; 0x240 <main+0x7c>
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8e 7f       	andi	r24, 0xFE	; 254
				
				SPI_read_data[2] = SPI_read_write(0xAA);
 22e:	85 b9       	out	0x05, r24	; 5
 230:	8a ea       	ldi	r24, 0xAA	; 170
 232:	5d d0       	rcall	.+186    	; 0x2ee <SPI_read_write>
 234:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SPI_read_data+0x2>
				
				
				PORTB |= (1 << PB0);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	12 c0       	rjmp	.+36     	; 0x264 <main+0xa0>
				}
				else if (a > 4 && a < 14){
 240:	05 97       	sbiw	r24, 0x05	; 5
 242:	09 97       	sbiw	r24, 0x09	; 9
 244:	78 f4       	brcc	.+30     	; 0x264 <main+0xa0>
					PORTB &= ~(1 << PB0);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8e 7f       	andi	r24, 0xFE	; 254
				SPI_read_data[(a - 5)] = SPI_read();
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <a>
 250:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <a+0x1>
 254:	25 97       	sbiw	r28, 0x05	; 5
 256:	45 d0       	rcall	.+138    	; 0x2e2 <SPI_read>
 258:	c4 5f       	subi	r28, 0xF4	; 244
 25a:	dd 4f       	sbci	r29, 0xFD	; 253
 25c:	88 83       	st	Y, r24
				PORTB |= (1 << PB0);
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	81 60       	ori	r24, 0x01	; 1
 262:	85 b9       	out	0x05, r24	; 5
				}
				a++;
 264:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <a>
 268:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <a+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <a+0x1>
 272:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <a>
				
				if (a > 32000){
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	9d 47       	sbci	r25, 0x7D	; 125
 27a:	08 f4       	brcc	.+2      	; 0x27e <main+0xba>
 27c:	ac cf       	rjmp	.-168    	; 0x1d6 <main+0x12>
					a = 0;
 27e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <a+0x1>
 282:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <a>
					for (int v = 0; v < 10 ; v++){
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
					uart_send_char(SPI_read_data[v]);	
 28a:	06 c0       	rjmp	.+12     	; 0x298 <main+0xd4>
 28c:	fe 01       	movw	r30, r28
 28e:	e4 5f       	subi	r30, 0xF4	; 244
 290:	fd 4f       	sbci	r31, 0xFD	; 253
 292:	80 81       	ld	r24, Z
 294:	98 d0       	rcall	.+304    	; 0x3c6 <uart_send_char>
				}
				a++;
				
				if (a > 32000){
					a = 0;
					for (int v = 0; v < 10 ; v++){
 296:	21 96       	adiw	r28, 0x01	; 1
 298:	ca 30       	cpi	r28, 0x0A	; 10
 29a:	d1 05       	cpc	r29, r1
 29c:	bc f3       	brlt	.-18     	; 0x28c <main+0xc8>
 29e:	9b cf       	rjmp	.-202    	; 0x1d6 <main+0x12>

000002a0 <SPI_init_master>:
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
	
	
	
	SPCR|= (0 << SPIE) |  ( 1 << SPR1) | (0<< SPR0) | (1 << SPE) | (1<<CPOL) ;
	SPDR = 0;
 2a0:	96 2f       	mov	r25, r22
 2a2:	24 b1       	in	r18, 0x04	; 4
 2a4:	27 60       	ori	r18, 0x07	; 7
 2a6:	24 b9       	out	0x04, r18	; 4
 2a8:	25 b1       	in	r18, 0x05	; 5
 2aa:	21 60       	ori	r18, 0x01	; 1
 2ac:	25 b9       	out	0x05, r18	; 5
 2ae:	25 b1       	in	r18, 0x05	; 5
 2b0:	28 60       	ori	r18, 0x08	; 8
 2b2:	25 b9       	out	0x05, r18	; 5
 2b4:	1c bc       	out	0x2c, r1	; 44
 2b6:	2c b5       	in	r18, 0x2c	; 44
 2b8:	68 2f       	mov	r22, r24
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	ab 01       	movw	r20, r22
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	69 2f       	mov	r22, r25
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	64 2b       	or	r22, r20
 2d8:	62 2b       	or	r22, r18
 2da:	62 65       	ori	r22, 0x52	; 82
 2dc:	6c bd       	out	0x2c, r22	; 44
 2de:	1e bc       	out	0x2e, r1	; 46
 2e0:	08 95       	ret

000002e2 <SPI_read>:
}


char SPI_read(){
	//PORTB &= ~(1 << PB0);
	SPDR = 0;
 2e2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR &(1<<SPIF))) ; 
 2e4:	0d b4       	in	r0, 0x2d	; 45
 2e6:	07 fe       	sbrs	r0, 7
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <SPI_read+0x2>
	unsigned char data = SPDR;
 2ea:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 2ec:	08 95       	ret

000002ee <SPI_read_write>:
unsigned char SPI_read_write(char dat_in){
	PORTB &= ~(1 << PB0);
 2ee:	95 b1       	in	r25, 0x05	; 5
 2f0:	9e 7f       	andi	r25, 0xFE	; 254
 2f2:	95 b9       	out	0x05, r25	; 5
	SPDR = dat_in;
 2f4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 2f6:	0d b4       	in	r0, 0x2d	; 45
 2f8:	07 fe       	sbrs	r0, 7
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <SPI_read_write+0x8>
	unsigned char data = SPDR;
 2fc:	8e b5       	in	r24, 0x2e	; 46
	return data;
	PORTB |= (1 << PB0);
	
	
	
}
 2fe:	08 95       	ret

00000300 <SPI_write>:


void SPI_write(unsigned char data){
	
	PORTB &= ~(1 << PB0);
 300:	95 b1       	in	r25, 0x05	; 5
 302:	9e 7f       	andi	r25, 0xFE	; 254
 304:	95 b9       	out	0x05, r25	; 5
	SPDR = data;
 306:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 308:	0d b4       	in	r0, 0x2d	; 45
 30a:	07 fe       	sbrs	r0, 7
 30c:	fd cf       	rjmp	.-6      	; 0x308 <SPI_write+0x8>
	 
	PORTB |= (1 << PB0);
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	81 60       	ori	r24, 0x01	; 1
 312:	85 b9       	out	0x05, r24	; 5
 314:	08 95       	ret

00000316 <__vector_25>:
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	0b b6       	in	r0, 0x3b	; 59
 322:	0f 92       	push	r0
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
 32c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <i>
 330:	84 31       	cpi	r24, 0x14	; 20
 332:	68 f4       	brcc	.+26     	; 0x34e <__vector_25+0x38>
 334:	e8 2f       	mov	r30, r24
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 33c:	ea 5e       	subi	r30, 0xEA	; 234
 33e:	fd 4f       	sbci	r31, 0xFD	; 253
 340:	90 83       	st	Z, r25
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <i>
 348:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uart0_full>
 34c:	05 c0       	rjmp	.+10     	; 0x358 <__vector_25+0x42>
 34e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <i>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uart0_full>
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <uart_init>:
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	c1 ec       	ldi	r28, 0xC1	; 193
 374:	d0 e0       	ldi	r29, 0x00	; 0
 376:	28 81       	ld	r18, Y
 378:	28 61       	ori	r18, 0x18	; 24
 37a:	28 83       	st	Y, r18
 37c:	e0 ec       	ldi	r30, 0xC0	; 192
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	20 81       	ld	r18, Z
 382:	22 60       	ori	r18, 0x02	; 2
 384:	20 83       	st	Z, r18
 386:	9b 01       	movw	r18, r22
 388:	ac 01       	movw	r20, r24
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	31 09       	sbc	r19, r1
 38e:	41 09       	sbc	r20, r1
 390:	51 09       	sbc	r21, r1
 392:	60 e8       	ldi	r22, 0x80	; 128
 394:	74 e8       	ldi	r23, 0x84	; 132
 396:	8e e1       	ldi	r24, 0x1E	; 30
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	1c d0       	rcall	.+56     	; 0x3d4 <__udivmodsi4>
 39c:	bb 27       	eor	r27, r27
 39e:	a5 2f       	mov	r26, r21
 3a0:	94 2f       	mov	r25, r20
 3a2:	83 2f       	mov	r24, r19
 3a4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 3a8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 3ac:	e2 ec       	ldi	r30, 0xC2	; 194
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	86 60       	ori	r24, 0x06	; 6
 3b4:	80 83       	st	Z, r24
 3b6:	88 81       	ld	r24, Y
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	88 83       	st	Y, r24
 3bc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <uart_send_char>:
 3c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3ca:	95 ff       	sbrs	r25, 5
 3cc:	fc cf       	rjmp	.-8      	; 0x3c6 <uart_send_char>
 3ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3d2:	08 95       	ret

000003d4 <__udivmodsi4>:
 3d4:	a1 e2       	ldi	r26, 0x21	; 33
 3d6:	1a 2e       	mov	r1, r26
 3d8:	aa 1b       	sub	r26, r26
 3da:	bb 1b       	sub	r27, r27
 3dc:	fd 01       	movw	r30, r26
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <__udivmodsi4_ep>

000003e0 <__udivmodsi4_loop>:
 3e0:	aa 1f       	adc	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	ee 1f       	adc	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	a2 17       	cp	r26, r18
 3ea:	b3 07       	cpc	r27, r19
 3ec:	e4 07       	cpc	r30, r20
 3ee:	f5 07       	cpc	r31, r21
 3f0:	20 f0       	brcs	.+8      	; 0x3fa <__udivmodsi4_ep>
 3f2:	a2 1b       	sub	r26, r18
 3f4:	b3 0b       	sbc	r27, r19
 3f6:	e4 0b       	sbc	r30, r20
 3f8:	f5 0b       	sbc	r31, r21

000003fa <__udivmodsi4_ep>:
 3fa:	66 1f       	adc	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	1a 94       	dec	r1
 404:	69 f7       	brne	.-38     	; 0x3e0 <__udivmodsi4_loop>
 406:	60 95       	com	r22
 408:	70 95       	com	r23
 40a:	80 95       	com	r24
 40c:	90 95       	com	r25
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	bd 01       	movw	r22, r26
 414:	cf 01       	movw	r24, r30
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
