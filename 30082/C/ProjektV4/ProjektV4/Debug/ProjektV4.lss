
ProjektV4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007f1  00800206  00800206  000005de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de3  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000729  00000000  00000000  000025ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000308  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e5 c0       	rjmp	.+458    	; 0x21c <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c1       	rjmp	.+552    	; 0x28e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	6a c0       	rjmp	.+212    	; 0x14a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3f       	cpi	r26, 0xF7	; 247
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0a d1       	rcall	.+532    	; 0x334 <main>
 120:	0f c2       	rjmp	.+1054   	; 0x540 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:
	//DIDR0 = 0xfe; //enabler ADC0
	//DIDR2 = 0xff; //disabler alt andet
	ADCSRB |=(1<<ADTS1)|(1<<ADTS2); //sæt auto trigger source til timer/counter0 overflow.
	*/
	
		ADMUX|=(1<<ADLAR)|(1<<REFS0); // Brug AVcc som reference spændningen, dvs 5 V hvis valgt på pin i arduino
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 66       	ori	r24, 0x60	; 96
 12c:	80 83       	st	Z, r24
		ADCSRA|=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2); //enable adc, auto triggermode, og 128 prescalling => clock=125 kh
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 6a       	ori	r24, 0xA4	; 164
 136:	80 83       	st	Z, r24
		ADCSRA|= (1<<ADIE)|(1<<ADSC);; // ENABLE interrupt. start sample (start convertion)
 138:	80 81       	ld	r24, Z
 13a:	88 64       	ori	r24, 0x48	; 72
 13c:	80 83       	st	Z, r24
		ADCSRB|=(1<<ADTS2)|(1<<ADTS1); // Timer1 overflow interrupt som trigger source til adc converteren.
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <__vector_29>:
volatile char receiveflag = 0; 



ISR(ADC_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	static int i=5;
	
	
	if (i<(record_length+5) && (control==0))
 16a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <record_length>
 16e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <record_length+0x1>
 172:	05 96       	adiw	r24, 0x05	; 5
 174:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 178:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17c:	a9 01       	movw	r20, r18
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	e8 f4       	brcc	.+58     	; 0x1be <__vector_29+0x74>
 184:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <control>
 188:	61 11       	cpse	r22, r1
 18a:	19 c0       	rjmp	.+50     	; 0x1be <__vector_29+0x74>
	{
		array_transmit[i++]=ADCH;
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 194:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 198:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 19c:	f9 01       	movw	r30, r18
 19e:	e7 5e       	subi	r30, 0xE7	; 231
 1a0:	fd 4f       	sbci	r31, 0xFD	; 253
 1a2:	60 83       	st	Z, r22
		//putchUSART0(array_transmit[i-1]);
		
		
		if (i==(record_length+5)){
 1a4:	84 17       	cp	r24, r20
 1a6:	95 07       	cpc	r25, r21
 1a8:	49 f5       	brne	.+82     	; 0x1fc <__vector_29+0xb2>
		//putchUSART0('a');
			control=1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <control>
			i=5;
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <__vector_29+0xb2>
		}
		
	}

	else if (i<((record_length+5)) && (control==1))
 1be:	48 17       	cp	r20, r24
 1c0:	59 07       	cpc	r21, r25
 1c2:	e0 f4       	brcc	.+56     	; 0x1fc <__vector_29+0xb2>
 1c4:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <control>
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	c1 f4       	brne	.+48     	; 0x1fc <__vector_29+0xb2>
	{
		array_transmit2[i++]= ADCH;
 1cc:	a9 01       	movw	r20, r18
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 1da:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1de:	f9 01       	movw	r30, r18
 1e0:	e8 5f       	subi	r30, 0xF8	; 248
 1e2:	f9 4f       	sbci	r31, 0xF9	; 249
 1e4:	60 83       	st	Z, r22
		
			if (i==(record_length+5))
 1e6:	84 17       	cp	r24, r20
 1e8:	95 07       	cpc	r25, r21
 1ea:	41 f4       	brne	.+16     	; 0x1fc <__vector_29+0xb2>
			{
				//putchUSART0('b');
				control=0;
 1ec:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <control>
				i=5;
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			}	

			}
	}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_20>:

ISR(TIMER1_OVF_vect) 
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0b b6       	in	r0, 0x3b	; 59
 228:	0f 92       	push	r0
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	
	TCNT1=62535-(62500/samplerate);
 242:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <samplerate>
 246:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <samplerate+0x1>
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	64 e2       	ldi	r22, 0x24	; 36
 250:	74 ef       	ldi	r23, 0xF4	; 244
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	36 d1       	rcall	.+620    	; 0x4c4 <__divmodsi4>
 258:	87 e4       	ldi	r24, 0x47	; 71
 25a:	94 ef       	ldi	r25, 0xF4	; 244
 25c:	82 1b       	sub	r24, r18
 25e:	93 0b       	sbc	r25, r19
 260:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 264:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0b be       	out	0x3b, r0	; 59
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_25>:

ISR (USART0_RX_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	static unsigned int index = 0;
	
    
	array_receive[index]= UDR0;
 2ac:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 2b0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 2b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2b8:	f9 01       	movw	r30, r18
 2ba:	e2 5f       	subi	r30, 0xF2	; 242
 2bc:	fd 4f       	sbci	r31, 0xFD	; 253
 2be:	80 83       	st	Z, r24
	
	
	if ((array_receive[0] == 0x55) && (array_receive[1] == 0xAA) && (index == array_receive[3])){
 2c0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <array_receive>
 2c4:	85 35       	cpi	r24, 0x55	; 85
 2c6:	a9 f4       	brne	.+42     	; 0x2f2 <__vector_25+0x64>
 2c8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <array_receive+0x1>
 2cc:	9a 3a       	cpi	r25, 0xAA	; 170
 2ce:	89 f4       	brne	.+34     	; 0x2f2 <__vector_25+0x64>
 2d0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <array_receive+0x3>
 2d4:	49 2f       	mov	r20, r25
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	24 17       	cp	r18, r20
 2da:	35 07       	cpc	r19, r21
 2dc:	51 f4       	brne	.+20     	; 0x2f2 <__vector_25+0x64>
		//putchUSART0('a');
		
		Packagesize = array_receive[3];
 2de:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <Packagesize>
		receiveflag = 1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <receiveflag>
		index = 0;
 2e8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 2ec:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
 2f0:	09 c0       	rjmp	.+18     	; 0x304 <__vector_25+0x76>
		
	}
	else if((array_receive[0]!=0x55) || (index == 0x0b))
 2f2:	85 35       	cpi	r24, 0x55	; 85
 2f4:	19 f4       	brne	.+6      	; 0x2fc <__vector_25+0x6e>
 2f6:	2b 30       	cpi	r18, 0x0B	; 11
 2f8:	31 05       	cpc	r19, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <__vector_25+0x76>
	{
		index = 0;
 2fc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 300:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	}
	index++;
 304:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 308:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 312:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <main>:

int main(void){
	
	
	DDRB|=(1<<PB7);
 334:	84 b1       	in	r24, 0x04	; 4
 336:	80 68       	ori	r24, 0x80	; 128
 338:	84 b9       	out	0x04, r24	; 4
	
	length = record_length+7;
 33a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <record_length>
 33e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <record_length+0x1>
 342:	9c 01       	movw	r18, r24
 344:	29 5f       	subi	r18, 0xF9	; 249
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <length+0x1>
 34c:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <length>
	
     //// ARRAY1 DATA PACKAGE
	array_transmit[0]=0x55;
 350:	e9 e1       	ldi	r30, 0x19	; 25
 352:	f2 e0       	ldi	r31, 0x02	; 2
 354:	a5 e5       	ldi	r26, 0x55	; 85
 356:	a0 83       	st	Z, r26
	array_transmit[1]=0xAA;
 358:	7a ea       	ldi	r23, 0xAA	; 170
 35a:	71 83       	std	Z+1, r23	; 0x01
	array_transmit[2]= (length>>8);
 35c:	32 83       	std	Z+2, r19	; 0x02
	array_transmit[3]= length;
 35e:	23 83       	std	Z+3, r18	; 0x03
	array_transmit[4]= 0x02;
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	64 83       	std	Z+4, r22	; 0x04
    array_transmit[length-1]=0x00;
 364:	ac 01       	movw	r20, r24
 366:	4a 5f       	subi	r20, 0xFA	; 250
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	fa 01       	movw	r30, r20
 36c:	e7 5e       	subi	r30, 0xE7	; 231
 36e:	fd 4f       	sbci	r31, 0xFD	; 253
 370:	10 82       	st	Z, r1
	array_transmit[length-2]=0x00;
 372:	05 96       	adiw	r24, 0x05	; 5
 374:	fc 01       	movw	r30, r24
 376:	e7 5e       	subi	r30, 0xE7	; 231
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	10 82       	st	Z, r1

      ////ARRAY 2 DATA PACKAGE
	array_transmit2[0]=0x55;
 37c:	e8 e0       	ldi	r30, 0x08	; 8
 37e:	f6 e0       	ldi	r31, 0x06	; 6
 380:	a0 83       	st	Z, r26
    array_transmit2[1]=0xAA;
 382:	71 83       	std	Z+1, r23	; 0x01
    array_transmit2[2]= (length>>8);
 384:	32 83       	std	Z+2, r19	; 0x02
    array_transmit2[3]= length;
 386:	23 83       	std	Z+3, r18	; 0x03
    array_transmit2[4]= 0x02;
 388:	64 83       	std	Z+4, r22	; 0x04
    array_transmit2[length-1]=0x00;
 38a:	fa 01       	movw	r30, r20
 38c:	e8 5f       	subi	r30, 0xF8	; 248
 38e:	f9 4f       	sbci	r31, 0xF9	; 249
 390:	10 82       	st	Z, r1
    array_transmit2[length-2]=0x00;
 392:	fc 01       	movw	r30, r24
 394:	e8 5f       	subi	r30, 0xF8	; 248
 396:	f9 4f       	sbci	r31, 0xF9	; 249
 398:	10 82       	st	Z, r1
  
	
	init_timer();
 39a:	48 d0       	rcall	.+144    	; 0x42c <init_timer>
	init_ADC();
 39c:	c3 de       	rcall	.-634    	; 0x124 <init_ADC>
 39e:	80 e1       	ldi	r24, 0x10	; 16
	uart_Init(MYUBRRF);
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	57 d0       	rcall	.+174    	; 0x452 <uart_Init>
    setRecievei();
 3a4:	89 d0       	rcall	.+274    	; 0x4b8 <setRecievei>
 3a6:	78 94       	sei
	sei();	
 3a8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <control>
	
	while (1)
	{
		if ((control==1) && (tx_done==0))
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	71 f4       	brne	.+28     	; 0x3cc <main+0x98>
 3b0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <tx_done>
 3b4:	81 11       	cpse	r24, r1
 3b6:	0a c0       	rjmp	.+20     	; 0x3cc <main+0x98>
 3b8:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <length>
		{
			
			putsUSART0(array_transmit,length);
 3bc:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <length+0x1>
 3c0:	89 e1       	ldi	r24, 0x19	; 25
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	5f d0       	rcall	.+190    	; 0x484 <putsUSART0>
 3c6:	81 e0       	ldi	r24, 0x01	; 1
		    tx_done=1;
 3c8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <tx_done>
 3cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <control>
		
		}
		if ((control==0) && (tx_done==1))
 3d0:	81 11       	cpse	r24, r1
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <main+0xba>
 3d4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <tx_done>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	49 f4       	brne	.+18     	; 0x3ee <main+0xba>
 3dc:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <length>
		{
			putsUSART0(array_transmit2,length);
 3e0:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <length+0x1>
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	96 e0       	ldi	r25, 0x06	; 6
 3e8:	4d d0       	rcall	.+154    	; 0x484 <putsUSART0>
 3ea:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <tx_done>
			tx_done=0;
 3ee:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <receiveflag>
			
		}	
	  
	   if (receiveflag==1){
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	c9 f6       	brne	.-78     	; 0x3a8 <main+0x74>
 3f6:	ee e0       	ldi	r30, 0x0E	; 14
		   
		   record_length = ((array_receive[7]<<8) | array_receive[8]);
 3f8:	f2 e0       	ldi	r31, 0x02	; 2
 3fa:	87 81       	ldd	r24, Z+7	; 0x07
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	98 2f       	mov	r25, r24
 400:	88 27       	eor	r24, r24
 402:	20 85       	ldd	r18, Z+8	; 0x08
 404:	82 2b       	or	r24, r18
 406:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <record_length+0x1>
 40a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <record_length>
 40e:	85 81       	ldd	r24, Z+5	; 0x05
		   samplerate = ((array_receive[5]<<8) | array_receive[6]);
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	98 2f       	mov	r25, r24
 414:	88 27       	eor	r24, r24
 416:	26 81       	ldd	r18, Z+6	; 0x06
 418:	82 2b       	or	r24, r18
 41a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <samplerate+0x1>
 41e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <samplerate>
		  
		   putchUSART0('a');
 422:	81 e6       	ldi	r24, 0x61	; 97
 424:	28 d0       	rcall	.+80     	; 0x476 <putchUSART0>
 426:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <receiveflag>
		   
		   receiveflag=0;
 42a:	be cf       	rjmp	.-132    	; 0x3a8 <main+0x74>

0000042c <init_timer>:
	TIMSK1|=(1<<TOIE1); // enable overflow interrupt.
	TCNT0 =35; //sample rate på 10.
	*/

     
	TCCR1A=0; // Timer1 i normal mode.
 42c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B|=(1<<CS12); // prescaler værdi 256
 430:	e1 e8       	ldi	r30, 0x81	; 129
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	84 60       	ori	r24, 0x04	; 4
 438:	80 83       	st	Z, r24
	TIMSK1|=(1<<TOIE1); // enable overflow interrupt.
 43a:	ef e6       	ldi	r30, 0x6F	; 111
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
	TCNT1=40536; // Overflow value= 2^16-1*10^-3 s * 16*10^6/64, TIME DELAY 100ms
 444:	88 e5       	ldi	r24, 0x58	; 88
 446:	9e e9       	ldi	r25, 0x9E	; 158
 448:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 44c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 450:	08 95       	ret

00000452 <uart_Init>:
}
char getchUSART0(void)
{
	while(!(UCSR0A&(1<<RXC0))); //wait till char received
	return UDR0;
}
 452:	22 e0       	ldi	r18, 0x02	; 2
 454:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 458:	e1 ec       	ldi	r30, 0xC1	; 193
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	20 81       	ld	r18, Z
 45e:	28 61       	ori	r18, 0x18	; 24
 460:	20 83       	st	Z, r18
 462:	e2 ec       	ldi	r30, 0xC2	; 194
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	20 81       	ld	r18, Z
 468:	26 60       	ori	r18, 0x06	; 6
 46a:	20 83       	st	Z, r18
 46c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 470:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 474:	08 95       	ret

00000476 <putchUSART0>:
void putchUSART0(char tx)
{
	while(!(UCSR0A & (1<<UDRE0)));   // wait for empty transmit buffer
 476:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 47a:	95 ff       	sbrs	r25, 5
 47c:	fc cf       	rjmp	.-8      	; 0x476 <putchUSART0>
	UDR0 = tx;
 47e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 482:	08 95       	ret

00000484 <putsUSART0>:
}
void putsUSART0(char *ptr, int length){
 484:	ef 92       	push	r14
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	8c 01       	movw	r16, r24
 492:	7b 01       	movw	r14, r22
	int i=0;
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<length){
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <putsUSART0+0x20>
		putchUSART0(*ptr);
 49a:	f8 01       	movw	r30, r16
 49c:	81 91       	ld	r24, Z+
 49e:	8f 01       	movw	r16, r30
 4a0:	ea df       	rcall	.-44     	; 0x476 <putchUSART0>
		ptr++;
		i++;
 4a2:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1<<UDRE0)));   // wait for empty transmit buffer
	UDR0 = tx;
}
void putsUSART0(char *ptr, int length){
	int i=0;
	while(i<length){
 4a4:	ce 15       	cp	r28, r14
 4a6:	df 05       	cpc	r29, r15
 4a8:	c4 f3       	brlt	.-16     	; 0x49a <putsUSART0+0x16>
		ptr++;
		i++;
		
	}
	
}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	08 95       	ret

000004b8 <setRecievei>:

void setRecievei(void)
{
	UCSR0B|=(1<<RXCIE0);
 4b8:	e1 ec       	ldi	r30, 0xC1	; 193
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	80 83       	st	Z, r24
 4c2:	08 95       	ret

000004c4 <__divmodsi4>:
 4c4:	05 2e       	mov	r0, r21
 4c6:	97 fb       	bst	r25, 7
 4c8:	16 f4       	brtc	.+4      	; 0x4ce <__divmodsi4+0xa>
 4ca:	00 94       	com	r0
 4cc:	0f d0       	rcall	.+30     	; 0x4ec <__negsi2>
 4ce:	57 fd       	sbrc	r21, 7
 4d0:	05 d0       	rcall	.+10     	; 0x4dc <__divmodsi4_neg2>
 4d2:	14 d0       	rcall	.+40     	; 0x4fc <__udivmodsi4>
 4d4:	07 fc       	sbrc	r0, 7
 4d6:	02 d0       	rcall	.+4      	; 0x4dc <__divmodsi4_neg2>
 4d8:	46 f4       	brtc	.+16     	; 0x4ea <__divmodsi4_exit>
 4da:	08 c0       	rjmp	.+16     	; 0x4ec <__negsi2>

000004dc <__divmodsi4_neg2>:
 4dc:	50 95       	com	r21
 4de:	40 95       	com	r20
 4e0:	30 95       	com	r19
 4e2:	21 95       	neg	r18
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	4f 4f       	sbci	r20, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ea <__divmodsi4_exit>:
 4ea:	08 95       	ret

000004ec <__negsi2>:
 4ec:	90 95       	com	r25
 4ee:	80 95       	com	r24
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
