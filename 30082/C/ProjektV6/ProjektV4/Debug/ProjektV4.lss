
ProjektV4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008c1  00800210  00800210  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186e  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fb  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c69  00000000  00000000  0000350d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00004178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000859  00000000  00000000  0000445c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000769  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000541e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e5 c0       	rjmp	.+458    	; 0x21c <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	6a c0       	rjmp	.+212    	; 0x14a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	e4 c0       	rjmp	.+456    	; 0x25a <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e4       	ldi	r30, 0x40	; 64
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 3d       	cpi	r26, 0xD1	; 209
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f6 d0       	rcall	.+492    	; 0x30c <main>
 120:	0d c4       	rjmp	.+2074   	; 0x93c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:

#include <avr/io.h>

void init_ADC(){
	
		ADMUX|=(1<<ADLAR)|(0<<REFS0); // Use Vref as reference. 3.3V connected
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 83       	st	Z, r24
		ADCSRA|=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2); 
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 6a       	ori	r24, 0xA4	; 164
 136:	80 83       	st	Z, r24
		ADCSRA|= (1<<ADIE)|(1<<ADSC);; // ENABLE interrupt. start sample (start convertion)
 138:	80 81       	ld	r24, Z
 13a:	88 64       	ori	r24, 0x48	; 72
 13c:	80 83       	st	Z, r24
		ADCSRB|=(1<<ADTS2)|(1<<ADTS1); // Timer1 overflow interrupt som trigger source til adc converteren.
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <__vector_29>:
uint16_t  i=5;



ISR(ADC_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	//static int i=5;
	
	
	if (i<(record_length+5) && (control==0))
 16a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <record_length>
 16e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <record_length+0x1>
 172:	05 96       	adiw	r24, 0x05	; 5
 174:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 178:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	f0 f4       	brcc	.+60     	; 0x1be <__vector_29+0x74>
 182:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <control>
 186:	41 11       	cpse	r20, r1
 188:	1a c0       	rjmp	.+52     	; 0x1be <__vector_29+0x74>
	{
		array_transmit[i++]=ADCH;
 18a:	a9 01       	movw	r20, r18
 18c:	4f 5f       	subi	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 194:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 198:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 19c:	f9 01       	movw	r30, r18
 19e:	e8 5d       	subi	r30, 0xD8	; 216
 1a0:	fd 4f       	sbci	r31, 0xFD	; 253
 1a2:	60 83       	st	Z, r22
		
		if (i>=(record_length+5))
 1a4:	48 17       	cp	r20, r24
 1a6:	59 07       	cpc	r21, r25
 1a8:	48 f1       	brcs	.+82     	; 0x1fc <__vector_29+0xb2>
		{
			control=1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <control>
			i=5;
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <__vector_29+0xb2>
		}
		
	}

	else if (i<((record_length+5)) && (control==1))
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	e0 f4       	brcc	.+56     	; 0x1fc <__vector_29+0xb2>
 1c4:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <control>
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	c1 f4       	brne	.+48     	; 0x1fc <__vector_29+0xb2>
	{
		array_transmit2[i++]= ADCH;
 1cc:	a9 01       	movw	r20, r18
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 1da:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1de:	f9 01       	movw	r30, r18
 1e0:	e2 58       	subi	r30, 0x82	; 130
 1e2:	f9 4f       	sbci	r31, 0xF9	; 249
 1e4:	60 83       	st	Z, r22
		
		if (i>=(record_length+5))
 1e6:	48 17       	cp	r20, r24
 1e8:	59 07       	cpc	r21, r25
 1ea:	40 f0       	brcs	.+16     	; 0x1fc <__vector_29+0xb2>
		{
			control=0;
 1ec:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <control>
			i=5;
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		}

	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_20>:

ISR(TIMER1_OVF_vect)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
	timer_count++;
 22a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <timer_count>
 22e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <timer_count+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <timer_count+0x1>
 238:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <timer_count>
TCNT1=sample_rate_raw;
 23c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sample_rate_raw>
 240:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sample_rate_raw+0x1>
 244:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 248:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_36>:

	 }
	

ISR(USART1_RX_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	0b b6       	in	r0, 0x3b	; 59
 266:	0f 92       	push	r0
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	
	static unsigned int g=0;
	
	array_receive[g]=UDR1;
 274:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g.2185>
 278:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <g.2185+0x1>
 27c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 280:	fc 01       	movw	r30, r24
 282:	e3 5e       	subi	r30, 0xE3	; 227
 284:	fd 4f       	sbci	r31, 0xFD	; 253
 286:	20 83       	st	Z, r18
	
	g++;
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <g.2185+0x1>
 28e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <g.2185>
	if ((array_receive[0] == 0x55) && (array_receive[1] == 0xAA) && (g==(array_receive[3])))
 292:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <array_receive>
 296:	25 35       	cpi	r18, 0x55	; 85
 298:	89 f4       	brne	.+34     	; 0x2bc <__vector_36+0x62>
 29a:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <array_receive+0x1>
 29e:	2a 3a       	cpi	r18, 0xAA	; 170
 2a0:	69 f4       	brne	.+26     	; 0x2bc <__vector_36+0x62>
 2a2:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <array_receive+0x3>
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	82 17       	cp	r24, r18
 2aa:	93 07       	cpc	r25, r19
 2ac:	39 f4       	brne	.+14     	; 0x2bc <__vector_36+0x62>
	{
		
		receiveflag=1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <receiveflag>
		g=0;
 2b4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g.2185+0x1>
 2b8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g.2185>
	}
	
	
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <calculateLRC>:


	
int calculateLRC(unsigned char *msgpointer, unsigned int length)
{
 2d6:	dc 01       	movw	r26, r24
	static unsigned char LRC8 = 0;
	LRC8 = 0;
 2d8:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
	for (int a = 0; a<(length-2); a++)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <calculateLRC+0x22>
	{
		
		LRC8 ^= msgpointer[a];
 2e2:	fd 01       	movw	r30, r26
 2e4:	e2 0f       	add	r30, r18
 2e6:	f3 1f       	adc	r31, r19
 2e8:	90 81       	ld	r25, Z
 2ea:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <__data_end>
 2ee:	94 27       	eor	r25, r20
 2f0:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <__data_end>
	
int calculateLRC(unsigned char *msgpointer, unsigned int length)
{
	static unsigned char LRC8 = 0;
	LRC8 = 0;
	for (int a = 0; a<(length-2); a++)
 2f4:	2f 5f       	subi	r18, 0xFF	; 255
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	ab 01       	movw	r20, r22
 2fa:	42 50       	subi	r20, 0x02	; 2
 2fc:	51 09       	sbc	r21, r1
 2fe:	24 17       	cp	r18, r20
 300:	35 07       	cpc	r19, r21
 302:	78 f3       	brcs	.-34     	; 0x2e2 <calculateLRC+0xc>
	{
		
		LRC8 ^= msgpointer[a];
		
	}
	return LRC8;
 304:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
	
}		  
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	08 95       	ret

0000030c <main>:
TCNT1=sample_rate_raw;
}

int main(void)
{
	init_timer();
 30c:	6a d2       	rcall	.+1236   	; 0x7e2 <init_timer>
	init_ADC();
 30e:	0a df       	rcall	.-492    	; 0x124 <init_ADC>
 310:	80 e1       	ldi	r24, 0x10	; 16
	uart_Init(16);
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	73 d2       	rcall	.+1254   	; 0x7fc <uart_Init>
 316:	80 e1       	ldi	r24, 0x10	; 16
	uart_Init1(16);
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	89 d2       	rcall	.+1298   	; 0x82e <uart_Init1>
 31c:	bc d2       	rcall	.+1400   	; 0x896 <setRecievei1>
	//setRecievei();
	setRecievei1();
 31e:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
	calculateLRC(array_transmit,length);
 322:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 326:	88 e2       	ldi	r24, 0x28	; 40
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	d5 df       	rcall	.-86     	; 0x2d6 <calculateLRC>
 32c:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
	calculateLRC(array_transmit2,length);
 330:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 334:	8e e7       	ldi	r24, 0x7E	; 126
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	ce df       	rcall	.-100    	; 0x2d6 <calculateLRC>
 33a:	60 e0       	ldi	r22, 0x00	; 0
	SPI_init_master(0,0);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	50 d1       	rcall	.+672    	; 0x5e0 <SPI_init_master>
 340:	84 b1       	in	r24, 0x04	; 4
 342:	80 68       	ori	r24, 0x80	; 128
	DDRB |= (1 << PB7);
 344:	84 b9       	out	0x04, r24	; 4
 346:	78 94       	sei
 348:	e8 e2       	ldi	r30, 0x28	; 40
	sei();
 34a:	f2 e0       	ldi	r31, 0x02	; 2
	
	
	array_transmit[0]=0x55;
 34c:	25 e5       	ldi	r18, 0x55	; 85
 34e:	20 83       	st	Z, r18
 350:	9a ea       	ldi	r25, 0xAA	; 170
 352:	91 83       	std	Z+1, r25	; 0x01
	array_transmit[1]=0xAA;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	84 83       	std	Z+4, r24	; 0x04
	array_transmit[4]=0x02;	
 358:	ee e7       	ldi	r30, 0x7E	; 126
 35a:	f6 e0       	ldi	r31, 0x06	; 6
	array_transmit2[0]=0x55;
 35c:	20 83       	st	Z, r18
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	84 83       	std	Z+4, r24	; 0x04
	array_transmit2[1]=0xAA;
 362:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	array_transmit2[4]=0x02;
	
	while (1)
 
	{
		if (i <= 5 ){
 366:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 36a:	06 97       	sbiw	r24, 0x06	; 6
 36c:	40 f5       	brcc	.+80     	; 0x3be <main+0xb2>
 36e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <record_length_tmp>
			record_length = record_length_tmp;
 372:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <record_length_tmp+0x1>
 376:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <record_length+0x1>
 37a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <record_length>
 37e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sample_rate_raw_tmp>
			sample_rate_raw = sample_rate_raw_tmp;
 382:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sample_rate_raw_tmp+0x1>
 386:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <sample_rate_raw+0x1>
 38a:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <sample_rate_raw>
 38e:	9c 01       	movw	r18, r24
 390:	29 5f       	subi	r18, 0xF9	; 249
			length=(record_length+7);
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <length+0x1>
 398:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <length>
 39c:	e8 e2       	ldi	r30, 0x28	; 40
 39e:	f2 e0       	ldi	r31, 0x02	; 2
			
			array_transmit[2]=(length>>8);
 3a0:	32 83       	std	Z+2, r19	; 0x02
 3a2:	23 83       	std	Z+3, r18	; 0x03
 3a4:	05 96       	adiw	r24, 0x05	; 5
			array_transmit[3]= length;
 3a6:	fc 01       	movw	r30, r24
			array_transmit[length-2]=0x00;
 3a8:	e8 5d       	subi	r30, 0xD8	; 216
 3aa:	fd 4f       	sbci	r31, 0xFD	; 253
 3ac:	10 82       	st	Z, r1
 3ae:	ee e7       	ldi	r30, 0x7E	; 126
 3b0:	f6 e0       	ldi	r31, 0x06	; 6
			
			
			array_transmit2[2]= (length>>8);
 3b2:	32 83       	std	Z+2, r19	; 0x02
 3b4:	23 83       	std	Z+3, r18	; 0x03
 3b6:	fc 01       	movw	r30, r24
			array_transmit2[3]= length;
 3b8:	e2 58       	subi	r30, 0x82	; 130
			array_transmit2[length-2]=0x00;
 3ba:	f9 4f       	sbci	r31, 0xF9	; 249
 3bc:	10 82       	st	Z, r1
 3be:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <receiveflag>
			
		}
	

  
	 if (receiveflag==1){
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <main+0xbc>
 3c6:	80 c0       	rjmp	.+256    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3c8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <receiveflag>
		 
		receiveflag=0; 
 3cc:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <array_receive+0x4>
	
		
		switch(array_receive[4])
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	21 f0       	breq	.+8      	; 0x3dc <main+0xd0>
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	09 f4       	brne	.+2      	; 0x3da <main+0xce>
 3d8:	4b c0       	rjmp	.+150    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 3da:	76 c0       	rjmp	.+236    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3dc:	ed e1       	ldi	r30, 0x1D	; 29
 3de:	f2 e0       	ldi	r31, 0x02	; 2
		{
			
			case 0x01: //BTN pressed is Generator tab , 0x00~BTN0, 0x01~BTN1, 0x02~BTN2, 0x03~BTN3, 9 elementer i array_receive.
			
			button_data = array_receive[5]; //button data
 3e0:	85 81       	ldd	r24, Z+5	; 0x05
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <button_data+0x1>
 3e8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <button_data>
 3ec:	46 81       	ldd	r20, Z+6	; 0x06
 3ee:	24 2f       	mov	r18, r20
			sw_data = array_receive[6]; // sw data
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	30 93 7c 06 	sts	0x067C, r19	; 0x80067c <sw_data+0x1>
 3f6:	20 93 7b 06 	sts	0x067B, r18	; 0x80067b <sw_data>
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	b1 f4       	brne	.+44     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			
			if (button_data == 0x00) {  //enter
 3fe:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <indicator>
				if (indicator == 0x00) {
 402:	81 11       	cpse	r24, r1
 404:	07 c0       	rjmp	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	24 30       	cpi	r18, 0x04	; 4
 408:	31 05       	cpc	r19, r1
					if (sw_data <= 0x03){
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	5d c0       	rjmp	.+186    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 40e:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <shape_out>
						shape_out = sw_data;
 412:	5a c0       	rjmp	.+180    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	19 f4       	brne	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
					}
				}
				else if (indicator == 0x01){
 418:	40 93 07 02 	sts	0x0207, r20	; 0x800207 <Ampl_out>
					Ampl_out = sw_data;
 41c:	55 c0       	rjmp	.+170    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
				}
				else if (indicator == 0x02){
 422:	52 c0       	rjmp	.+164    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 424:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <Freq_out>
					Freq_out = sw_data;
 428:	4f c0       	rjmp	.+158    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	91 05       	cpc	r25, r1
				}
			}
			else if(button_data == 0x01){   //select
 42e:	59 f4       	brne	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 430:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <indicator>
				if (indicator < 2) {
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	20 f4       	brcc	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 438:	8f 5f       	subi	r24, 0xFF	; 255
 43a:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <indicator>
					indicator++;
 43e:	44 c0       	rjmp	.+136    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 440:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <indicator>
				}
				else {
					indicator = 0;
 444:	41 c0       	rjmp	.+130    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	91 05       	cpc	r25, r1
				}
			}
			else if(button_data == 0x02){   //run/stop
 44a:	39 f4       	brne	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 44c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <run>
				run = !run;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	89 27       	eor	r24, r25
 454:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <run>
 458:	37 c0       	rjmp	.+110    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 45a:	03 97       	sbiw	r24, 0x03	; 3
 45c:	a9 f5       	brne	.+106    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			}
			else if(button_data == 0x03){   //reset
 45e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Freq_out>
				Freq_out = 0;
 462:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Ampl_out>
				Ampl_out = 0;
 466:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <shape_out>
				shape_out = 0;
 46a:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <indicator>
				indicator = 0;
 46e:	2c c0       	rjmp	.+88     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 470:	ed e1       	ldi	r30, 0x1D	; 29
 472:	f2 e0       	ldi	r31, 0x02	; 2
			break;
			
			case 0x02:
			
			
			record_length_tmp=((array_receive[7]<<8)|(array_receive[8]));
 474:	87 81       	ldd	r24, Z+7	; 0x07
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	98 2f       	mov	r25, r24
 47a:	88 27       	eor	r24, r24
 47c:	20 85       	ldd	r18, Z+8	; 0x08
 47e:	82 2b       	or	r24, r18
 480:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <record_length_tmp+0x1>
 484:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <record_length_tmp>
 488:	25 81       	ldd	r18, Z+5	; 0x05
 48a:	30 e0       	ldi	r19, 0x00	; 0
			//length=(record_length+7);
			samplerate =((array_receive[5]<<8)|(array_receive[6]));
 48c:	32 2f       	mov	r19, r18
 48e:	22 27       	eor	r18, r18
 490:	86 81       	ldd	r24, Z+6	; 0x06
 492:	28 2b       	or	r18, r24
 494:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <samplerate+0x1>
 498:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <samplerate>
 49c:	40 e0       	ldi	r20, 0x00	; 0
			sample_rate_raw_tmp = 65536-(250000/samplerate);
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	60 e9       	ldi	r22, 0x90	; 144
 4a2:	70 ed       	ldi	r23, 0xD0	; 208
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	fc d1       	rcall	.+1016   	; 0x8a2 <__divmodsi4>
 4aa:	31 95       	neg	r19
 4ac:	21 95       	neg	r18
 4ae:	31 09       	sbc	r19, r1
 4b0:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <sample_rate_raw_tmp+0x1>
 4b4:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <sample_rate_raw_tmp>
 4b8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <length>
				array_transmit2[3]= length;
				array_transmit2[length-1]=calculateLRC(array_transmit2,length);
				array_transmit2[length-2]=0x00;*/
				
				
				putchUSART0(array_transmit[length-1]);
 4bc:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <length+0x1>
 4c0:	e9 5d       	subi	r30, 0xD9	; 217
 4c2:	fd 4f       	sbci	r31, 0xFD	; 253
 4c4:	80 81       	ld	r24, Z
 4c6:	ac d1       	rcall	.+856    	; 0x820 <putchUSART0>
 4c8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <control>
		}
		
		
		
	
	  	if ((control==1) && (tx_done==0))
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	d1 f4       	brne	.+52     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4d0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <tx_done>
 4d4:	81 11       	cpse	r24, r1
 4d6:	16 c0       	rjmp	.+44     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4d8:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
	  	{	array_transmit[length-1]=calculateLRC(array_transmit,length);
 4dc:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 4e0:	eb 01       	movw	r28, r22
 4e2:	21 97       	sbiw	r28, 0x01	; 1
 4e4:	88 e2       	ldi	r24, 0x28	; 40
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	f6 de       	rcall	.-532    	; 0x2d6 <calculateLRC>
 4ea:	c8 5d       	subi	r28, 0xD8	; 216
 4ec:	dd 4f       	sbci	r29, 0xFD	; 253
 4ee:	88 83       	st	Y, r24
 4f0:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
		  	putsUSART1(array_transmit,length);
 4f4:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 4f8:	88 e2       	ldi	r24, 0x28	; 40
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	b1 d1       	rcall	.+866    	; 0x860 <putsUSART1>
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <tx_done>
		  	tx_done=1;
 504:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <control>
			  
		  
	  	}
	  	if ((control==0) && (tx_done==1))
 508:	81 11       	cpse	r24, r1
 50a:	19 c0       	rjmp	.+50     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 50c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <tx_done>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	a9 f4       	brne	.+42     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 514:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
	  	{	array_transmit2[length-1]=calculateLRC(array_transmit2,length);
 518:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 51c:	eb 01       	movw	r28, r22
 51e:	21 97       	sbiw	r28, 0x01	; 1
 520:	8e e7       	ldi	r24, 0x7E	; 126
 522:	96 e0       	ldi	r25, 0x06	; 6
 524:	d8 de       	rcall	.-592    	; 0x2d6 <calculateLRC>
 526:	c2 58       	subi	r28, 0x82	; 130
 528:	d9 4f       	sbci	r29, 0xF9	; 249
 52a:	88 83       	st	Y, r24
 52c:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <length>
		  	putsUSART1(array_transmit2,length);
 530:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <length+0x1>
 534:	8e e7       	ldi	r24, 0x7E	; 126
 536:	96 e0       	ldi	r25, 0x06	; 6
 538:	93 d1       	rcall	.+806    	; 0x860 <putsUSART1>
 53a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <tx_done>
		  	tx_done=0;
 53e:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <samplerate>
		  	
	  	}
	   	
		   
		   
		   if (timer_count >= (samplerate / 10)){    //SPI send @10Hz
 542:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <samplerate+0x1>
 546:	ad ec       	ldi	r26, 0xCD	; 205
 548:	bc ec       	ldi	r27, 0xCC	; 204
 54a:	c7 d1       	rcall	.+910    	; 0x8da <__umulhisi3>
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <timer_count>
 55c:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <timer_count+0x1>
 560:	28 17       	cp	r18, r24
 562:	39 07       	cpc	r19, r25
 564:	08 f4       	brcc	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 566:	fd ce       	rjmp	.-518    	; 0x362 <main+0x56>
 568:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <timer_count+0x1>
			   uint8_t freq = 0;
			   uint8_t shape = 0;
			   uint8_t ampl = 0;
			   uint8_t check = 0;
			   
			   timer_count = 0;
 56c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <timer_count>
			   data_ok = 0;
			   freq = 0;
			   ampl = 0;
			   shape = 0;
			   uint32_t test = 0;
			   test = fpga_get_data();
 570:	69 d0       	rcall	.+210    	; 0x644 <fpga_get_data>
			   data_ok |= (test >> 24) & 0xFF000000;
			   freq |= (test >> 16);
 572:	6b 01       	movw	r12, r22
 574:	7c 01       	movw	r14, r24
			   shape |= (test >> 8);
 576:	4c 01       	movw	r8, r24
 578:	aa 24       	eor	r10, r10
			   ampl |= test & 0xFF;
			   
			   //putsUSART0(data_ok);
			   
			   
			   putchUSART1(0x55);
 57a:	bb 24       	eor	r11, r11
 57c:	47 2e       	mov	r4, r23
			   putchUSART1(0xAA);
 57e:	58 2e       	mov	r5, r24
 580:	69 2e       	mov	r6, r25
 582:	77 24       	eor	r7, r7
			   putchUSART1(0x00);
 584:	85 e5       	ldi	r24, 0x55	; 85
 586:	65 d1       	rcall	.+714    	; 0x852 <putchUSART1>
 588:	8a ea       	ldi	r24, 0xAA	; 170
			   putchUSART1(0x0B); //length
 58a:	63 d1       	rcall	.+710    	; 0x852 <putchUSART1>
 58c:	80 e0       	ldi	r24, 0x00	; 0
			   putchUSART1(0x01);
 58e:	61 d1       	rcall	.+706    	; 0x852 <putchUSART1>
 590:	8b e0       	ldi	r24, 0x0B	; 11
			   putchUSART1(indicator);   //indicator
 592:	5f d1       	rcall	.+702    	; 0x852 <putchUSART1>
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	5d d1       	rcall	.+698    	; 0x852 <putchUSART1>
 598:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <indicator>
			   putchUSART1(shape);
 59c:	5a d1       	rcall	.+692    	; 0x852 <putchUSART1>
 59e:	84 2d       	mov	r24, r4
			   putchUSART1(ampl);
 5a0:	58 d1       	rcall	.+688    	; 0x852 <putchUSART1>
 5a2:	8c 2d       	mov	r24, r12
 5a4:	56 d1       	rcall	.+684    	; 0x852 <putchUSART1>
			   putchUSART1(freq);
 5a6:	88 2d       	mov	r24, r8
 5a8:	54 d1       	rcall	.+680    	; 0x852 <putchUSART1>
 5aa:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <indicator>
			   
			   check = 0x55 ^ 0xAA ^ 0x00 ^ 0x0B ^ 0x01 ^ indicator ^ shape ^ ampl ^ freq;
 5ae:	48 26       	eor	r4, r24
 5b0:	c4 24       	eor	r12, r4
 5b2:	8c 24       	eor	r8, r12
 5b4:	85 ef       	ldi	r24, 0xF5	; 245
 5b6:	88 26       	eor	r8, r24
			   putchUSART1(0x00);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	4b d1       	rcall	.+662    	; 0x852 <putchUSART1>
 5bc:	88 2d       	mov	r24, r8
			   putchUSART1(check);
 5be:	49 d1       	rcall	.+658    	; 0x852 <putchUSART1>
 5c0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <run>
			   //putchUSART1(0x00);
			   
			   PORTB = (run << PB7);
 5c4:	87 95       	ror	r24
 5c6:	88 27       	eor	r24, r24
 5c8:	87 95       	ror	r24
 5ca:	85 b9       	out	0x05, r24	; 5
 5cc:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <shape_out>
			   fpga_send_data(run, Ampl_out, Freq_out, shape_out);
 5d0:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <Freq_out>
 5d4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <Ampl_out>
 5d8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <run>
 5dc:	c1 d0       	rcall	.+386    	; 0x760 <fpga_send_data>
 5de:	c1 ce       	rjmp	.-638    	; 0x362 <main+0x56>

000005e0 <SPI_init_master>:
 5e0:	96 2f       	mov	r25, r22
 5e2:	24 b1       	in	r18, 0x04	; 4
 5e4:	27 60       	ori	r18, 0x07	; 7
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);
	
	
	
	SPCR|= (0 << SPIE) |  ( 1 << SPR1) | (0<< SPR0) | (1 << SPE) | (1<<CPOL) ;
	SPDR = 0;
 5e6:	24 b9       	out	0x04, r18	; 4
 5e8:	25 b1       	in	r18, 0x05	; 5
 5ea:	21 60       	ori	r18, 0x01	; 1
 5ec:	25 b9       	out	0x05, r18	; 5
 5ee:	25 b1       	in	r18, 0x05	; 5
 5f0:	28 60       	ori	r18, 0x08	; 8
 5f2:	25 b9       	out	0x05, r18	; 5
 5f4:	1c bc       	out	0x2c, r1	; 44
 5f6:	2c b5       	in	r18, 0x2c	; 44
 5f8:	68 2f       	mov	r22, r24
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	ab 01       	movw	r20, r22
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	69 2f       	mov	r22, r25
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	64 2b       	or	r22, r20
 618:	62 2b       	or	r22, r18
 61a:	61 65       	ori	r22, 0x51	; 81
 61c:	6c bd       	out	0x2c, r22	; 44
 61e:	1e bc       	out	0x2e, r1	; 46
 620:	08 95       	ret

00000622 <SPI_read>:
}


char SPI_read(){
	//PORTB &= ~(1 << PB0);
	SPDR = 0;
 622:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR &(1<<SPIF))) ; 
 624:	0d b4       	in	r0, 0x2d	; 45
 626:	07 fe       	sbrs	r0, 7
 628:	fd cf       	rjmp	.-6      	; 0x624 <SPI_read+0x2>
	unsigned char data = SPDR;
 62a:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 62c:	08 95       	ret

0000062e <SPI_read_write>:
unsigned char SPI_read_write(char dat_in){
	//PORTB &= ~(1 << PB0);
	SPDR = dat_in;
 62e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 630:	0d b4       	in	r0, 0x2d	; 45
 632:	07 fe       	sbrs	r0, 7
 634:	fd cf       	rjmp	.-6      	; 0x630 <SPI_read_write+0x2>
	unsigned char data = SPDR;
 636:	8e b5       	in	r24, 0x2e	; 46
	return data;
	//PORTB |= (1 << PB0);
	
	
	
}
 638:	08 95       	ret

0000063a <SPI_write>:


void SPI_write(unsigned char data){
	
	//PORTB &= ~(1 << PB0);
	SPDR = data;
 63a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF))) ;
 63c:	0d b4       	in	r0, 0x2d	; 45
 63e:	07 fe       	sbrs	r0, 7
 640:	fd cf       	rjmp	.-6      	; 0x63c <SPI_write+0x2>
	 
	//PORTB |= (1 << PB0);
	
	
	
}
 642:	08 95       	ret

00000644 <fpga_get_data>:

uint32_t fpga_get_data() {
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	2a 97       	sbiw	r28, 0x0a	; 10
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 65c:	00 e0       	ldi	r16, 0x00	; 0
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	3b c0       	rjmp	.+118    	; 0x6d8 <fpga_get_data+0x94>
		if (d < 4){
 662:	04 30       	cpi	r16, 0x04	; 4
 664:	11 05       	cpc	r17, r1
 666:	4c f4       	brge	.+18     	; 0x67a <fpga_get_data+0x36>
			PORTB &= ~(1 << PB0);
 668:	85 b1       	in	r24, 0x05	; 5
 66a:	8e 7f       	andi	r24, 0xFE	; 254
 66c:	85 b9       	out	0x05, r24	; 5
			SPI_write(0xA1);
 66e:	81 ea       	ldi	r24, 0xA1	; 161
 670:	e4 df       	rcall	.-56     	; 0x63a <SPI_write>
			PORTB |= (1 << PB0);
 672:	85 b1       	in	r24, 0x05	; 5
 674:	81 60       	ori	r24, 0x01	; 1
 676:	85 b9       	out	0x05, r24	; 5
 678:	2d c0       	rjmp	.+90     	; 0x6d4 <fpga_get_data+0x90>
		}
		else if (d == 4) {
 67a:	04 30       	cpi	r16, 0x04	; 4
 67c:	11 05       	cpc	r17, r1
 67e:	49 f4       	brne	.+18     	; 0x692 <fpga_get_data+0x4e>
			PORTB &= ~(1 << PB0);
 680:	85 b1       	in	r24, 0x05	; 5
 682:	8e 7f       	andi	r24, 0xFE	; 254
 684:	85 b9       	out	0x05, r24	; 5
			SPI_read_data[0] = SPI_read_write(0xAA);
 686:	8a ea       	ldi	r24, 0xAA	; 170
 688:	d2 df       	rcall	.-92     	; 0x62e <SPI_read_write>
			PORTB |= (1 << PB0);
 68a:	85 b1       	in	r24, 0x05	; 5
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	85 b9       	out	0x05, r24	; 5
 690:	21 c0       	rjmp	.+66     	; 0x6d4 <fpga_get_data+0x90>
		}
		else if (d == 5){
 692:	05 30       	cpi	r16, 0x05	; 5
 694:	11 05       	cpc	r17, r1
 696:	51 f4       	brne	.+20     	; 0x6ac <fpga_get_data+0x68>
			PORTB &= ~(1 << PB0);
 698:	85 b1       	in	r24, 0x05	; 5
 69a:	8e 7f       	andi	r24, 0xFE	; 254
			
			SPI_read_data[2] = SPI_read_write(0xAA);
 69c:	85 b9       	out	0x05, r24	; 5
 69e:	8a ea       	ldi	r24, 0xAA	; 170
 6a0:	c6 df       	rcall	.-116    	; 0x62e <SPI_read_write>
 6a2:	8b 83       	std	Y+3, r24	; 0x03
			
			
			PORTB |= (1 << PB0);
 6a4:	85 b1       	in	r24, 0x05	; 5
 6a6:	81 60       	ori	r24, 0x01	; 1
 6a8:	85 b9       	out	0x05, r24	; 5
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <fpga_get_data+0x90>
		}
		else if (d > 4 && d < 14){
 6ac:	c8 01       	movw	r24, r16
 6ae:	05 97       	sbiw	r24, 0x05	; 5
 6b0:	09 97       	sbiw	r24, 0x09	; 9
 6b2:	80 f4       	brcc	.+32     	; 0x6d4 <fpga_get_data+0x90>
			PORTB &= ~(1 << PB0);
 6b4:	85 b1       	in	r24, 0x05	; 5
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
			SPI_read_data[(d - 5)] = SPI_read();
 6b8:	85 b9       	out	0x05, r24	; 5
 6ba:	b3 df       	rcall	.-154    	; 0x622 <SPI_read>
 6bc:	f8 01       	movw	r30, r16
 6be:	35 97       	sbiw	r30, 0x05	; 5
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	2c 0f       	add	r18, r28
 6c6:	3d 1f       	adc	r19, r29
 6c8:	e2 0f       	add	r30, r18
 6ca:	f3 1f       	adc	r31, r19
 6cc:	80 83       	st	Z, r24
			PORTB |= (1 << PB0);
 6ce:	85 b1       	in	r24, 0x05	; 5
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	85 b9       	out	0x05, r24	; 5

uint32_t fpga_get_data() {
	uint8_t SPI_read_data[10];
	uint8_t xor8 = 0;
	uint32_t gen_data = 0;
	for (int d = 0; d < 14; d++){
 6d4:	0f 5f       	subi	r16, 0xFF	; 255
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	0e 30       	cpi	r16, 0x0E	; 14
 6da:	11 05       	cpc	r17, r1
 6dc:	0c f4       	brge	.+2      	; 0x6e0 <fpga_get_data+0x9c>
 6de:	c1 cf       	rjmp	.-126    	; 0x662 <fpga_get_data+0x1e>
			PORTB &= ~(1 << PB0);
			SPI_read_data[(d - 5)] = SPI_read();
			PORTB |= (1 << PB0);
		}
	}
	xor8 = SPI_read_data[2] ^ SPI_read_data[3] ^ SPI_read_data[4] ^ SPI_read_data[5] ^  SPI_read_data[6] ;
 6e0:	9b 81       	ldd	r25, Y+3	; 0x03
 6e2:	3c 81       	ldd	r19, Y+4	; 0x04
 6e4:	6d 81       	ldd	r22, Y+5	; 0x05
 6e6:	4e 81       	ldd	r20, Y+6	; 0x06
 6e8:	2f 81       	ldd	r18, Y+7	; 0x07
 6ea:	89 2f       	mov	r24, r25
 6ec:	83 27       	eor	r24, r19
 6ee:	86 27       	eor	r24, r22
 6f0:	84 27       	eor	r24, r20
 6f2:	82 27       	eor	r24, r18
	if ((xor8 == SPI_read_data[7]) && (SPI_read_data[2] == 0xAA) && (SPI_read_data[3] == 0xFF)){
 6f4:	58 85       	ldd	r21, Y+8	; 0x08
 6f6:	85 13       	cpse	r24, r21
 6f8:	1a c0       	rjmp	.+52     	; 0x72e <fpga_get_data+0xea>
 6fa:	9a 3a       	cpi	r25, 0xAA	; 170
 6fc:	e9 f4       	brne	.+58     	; 0x738 <fpga_get_data+0xf4>
 6fe:	3f 3f       	cpi	r19, 0xFF	; 255
 700:	01 f5       	brne	.+64     	; 0x742 <fpga_get_data+0xfe>
	
	gen_data |= SPI_read_data[4] ;
 702:	86 2f       	mov	r24, r22
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
	gen_data  <<= 16;
 70a:	dc 01       	movw	r26, r24
 70c:	99 27       	eor	r25, r25
 70e:	88 27       	eor	r24, r24
	
	gen_data |= (SPI_read_data[5] << 8);
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	74 2f       	mov	r23, r20
 714:	66 27       	eor	r22, r22
 716:	ab 01       	movw	r20, r22
 718:	77 0f       	add	r23, r23
 71a:	66 0b       	sbc	r22, r22
 71c:	77 0b       	sbc	r23, r23
 71e:	84 2b       	or	r24, r20
 720:	95 2b       	or	r25, r21
 722:	a6 2b       	or	r26, r22
 724:	b7 2b       	or	r27, r23
	gen_data |= SPI_read_data[6] ;
 726:	bc 01       	movw	r22, r24
 728:	cd 01       	movw	r24, r26
 72a:	62 2b       	or	r22, r18
 72c:	0e c0       	rjmp	.+28     	; 0x74a <fpga_get_data+0x106>
	}
	else {
		gen_data = 0x37000000;
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	97 e3       	ldi	r25, 0x37	; 55
 736:	09 c0       	rjmp	.+18     	; 0x74a <fpga_get_data+0x106>
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	97 e3       	ldi	r25, 0x37	; 55
 740:	04 c0       	rjmp	.+8      	; 0x74a <fpga_get_data+0x106>
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	97 e3       	ldi	r25, 0x37	; 55
	/*for (int v = 0; v < 10 ; v++){
		uart_send_char(SPI_read_data[v]);
		//uart_send_char(v);
	}*/
	return gen_data;
}
 74a:	2a 96       	adiw	r28, 0x0a	; 10
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	f8 94       	cli
 750:	de bf       	out	0x3e, r29	; 62
 752:	0f be       	out	0x3f, r0	; 63
 754:	cd bf       	out	0x3d, r28	; 61
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	08 95       	ret

00000760 <fpga_send_data>:

void fpga_send_data(bool state, uint8_t a, uint8_t f, uint8_t s){
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	28 97       	sbiw	r28, 0x08	; 8
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
	uint8_t shape_stat = 0;
	shape_stat |= s;
	shape_stat |= (state << 7);
 778:	90 e8       	ldi	r25, 0x80	; 128
 77a:	89 9f       	mul	r24, r25
 77c:	f0 01       	movw	r30, r0
 77e:	11 24       	eor	r1, r1
 780:	e2 2b       	or	r30, r18
	uint8_t spi_out[8] = { 0xDC, 0xCA, state, a, f, shape_stat,(0xDC ^ 0xCA ^ state ^ s ^ f ^ a),0x00};
 782:	9c ed       	ldi	r25, 0xDC	; 220
 784:	99 83       	std	Y+1, r25	; 0x01
 786:	9a ec       	ldi	r25, 0xCA	; 202
 788:	9a 83       	std	Y+2, r25	; 0x02
 78a:	8b 83       	std	Y+3, r24	; 0x03
 78c:	6c 83       	std	Y+4, r22	; 0x04
 78e:	4d 83       	std	Y+5, r20	; 0x05
 790:	ee 83       	std	Y+6, r30	; 0x06
 792:	82 27       	eor	r24, r18
 794:	84 27       	eor	r24, r20
 796:	68 27       	eor	r22, r24
 798:	86 e1       	ldi	r24, 0x16	; 22
 79a:	68 27       	eor	r22, r24
 79c:	6f 83       	std	Y+7, r22	; 0x07
 79e:	18 86       	std	Y+8, r1	; 0x08
	
	for (int v = 0; v < 8 ; v++){
 7a0:	00 e0       	ldi	r16, 0x00	; 0
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <fpga_send_data+0x66>
		PORTB &= ~(1 << PB0);
 7a6:	85 b1       	in	r24, 0x05	; 5
 7a8:	8e 7f       	andi	r24, 0xFE	; 254
 7aa:	85 b9       	out	0x05, r24	; 5
		SPI_write(spi_out[v]);
 7ac:	e1 e0       	ldi	r30, 0x01	; 1
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ec 0f       	add	r30, r28
 7b2:	fd 1f       	adc	r31, r29
 7b4:	e0 0f       	add	r30, r16
 7b6:	f1 1f       	adc	r31, r17
 7b8:	80 81       	ld	r24, Z
 7ba:	3f df       	rcall	.-386    	; 0x63a <SPI_write>
		PORTB |= (1 << PB0);
 7bc:	85 b1       	in	r24, 0x05	; 5
 7be:	81 60       	ori	r24, 0x01	; 1
 7c0:	85 b9       	out	0x05, r24	; 5
	uint8_t shape_stat = 0;
	shape_stat |= s;
	shape_stat |= (state << 7);
	uint8_t spi_out[8] = { 0xDC, 0xCA, state, a, f, shape_stat,(0xDC ^ 0xCA ^ state ^ s ^ f ^ a),0x00};
	
	for (int v = 0; v < 8 ; v++){
 7c2:	0f 5f       	subi	r16, 0xFF	; 255
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	08 30       	cpi	r16, 0x08	; 8
 7c8:	11 05       	cpc	r17, r1
 7ca:	6c f3       	brlt	.-38     	; 0x7a6 <fpga_send_data+0x46>
		SPI_write(spi_out[v]);
		PORTB |= (1 << PB0);
	}
		
	
 7cc:	28 96       	adiw	r28, 0x08	; 8
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	08 95       	ret

000007e2 <init_timer>:
 7e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 7e6:	e1 e8       	ldi	r30, 0x81	; 129
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	83 60       	ori	r24, 0x03	; 3
 7ee:	80 83       	st	Z, r24
 7f0:	ef e6       	ldi	r30, 0x6F	; 111
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	81 60       	ori	r24, 0x01	; 1
 7f8:	80 83       	st	Z, r24
 7fa:	08 95       	ret

000007fc <uart_Init>:
 7fc:	22 e0       	ldi	r18, 0x02	; 2
 7fe:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 802:	e1 ec       	ldi	r30, 0xC1	; 193
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	20 81       	ld	r18, Z
 808:	28 61       	ori	r18, 0x18	; 24
 80a:	20 83       	st	Z, r18
 80c:	e2 ec       	ldi	r30, 0xC2	; 194
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	20 81       	ld	r18, Z
 812:	26 60       	ori	r18, 0x06	; 6
 814:	20 83       	st	Z, r18
 816:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 81a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 81e:	08 95       	ret

00000820 <putchUSART0>:
 820:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 824:	95 ff       	sbrs	r25, 5
 826:	fc cf       	rjmp	.-8      	; 0x820 <putchUSART0>
 828:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 82c:	08 95       	ret

0000082e <uart_Init1>:
 82e:	22 e0       	ldi	r18, 0x02	; 2
 830:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 834:	e9 ec       	ldi	r30, 0xC9	; 201
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	20 81       	ld	r18, Z
 83a:	28 61       	ori	r18, 0x18	; 24
 83c:	20 83       	st	Z, r18
 83e:	ea ec       	ldi	r30, 0xCA	; 202
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	20 81       	ld	r18, Z
 844:	26 60       	ori	r18, 0x06	; 6
 846:	20 83       	st	Z, r18
 848:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 84c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 850:	08 95       	ret

00000852 <putchUSART1>:
 852:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 856:	95 ff       	sbrs	r25, 5
 858:	fc cf       	rjmp	.-8      	; 0x852 <putchUSART1>
 85a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 85e:	08 95       	ret

00000860 <putsUSART1>:
 860:	ef 92       	push	r14
 862:	ff 92       	push	r15
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	7c 01       	movw	r14, r24
 86e:	8b 01       	movw	r16, r22
 870:	c0 e0       	ldi	r28, 0x00	; 0
 872:	d0 e0       	ldi	r29, 0x00	; 0
 874:	06 c0       	rjmp	.+12     	; 0x882 <putsUSART1+0x22>
 876:	f7 01       	movw	r30, r14
 878:	ec 0f       	add	r30, r28
 87a:	fd 1f       	adc	r31, r29
 87c:	80 81       	ld	r24, Z
 87e:	e9 df       	rcall	.-46     	; 0x852 <putchUSART1>
 880:	21 96       	adiw	r28, 0x01	; 1
 882:	c0 17       	cp	r28, r16
 884:	d1 07       	cpc	r29, r17
 886:	bc f3       	brlt	.-18     	; 0x876 <putsUSART1+0x16>
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	ff 90       	pop	r15
 892:	ef 90       	pop	r14
 894:	08 95       	ret

00000896 <setRecievei1>:
 896:	e9 ec       	ldi	r30, 0xC9	; 201
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	80 68       	ori	r24, 0x80	; 128
 89e:	80 83       	st	Z, r24
 8a0:	08 95       	ret

000008a2 <__divmodsi4>:
 8a2:	05 2e       	mov	r0, r21
 8a4:	97 fb       	bst	r25, 7
 8a6:	16 f4       	brtc	.+4      	; 0x8ac <__divmodsi4+0xa>
 8a8:	00 94       	com	r0
 8aa:	0f d0       	rcall	.+30     	; 0x8ca <__negsi2>
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	05 d0       	rcall	.+10     	; 0x8ba <__divmodsi4_neg2>
 8b0:	23 d0       	rcall	.+70     	; 0x8f8 <__udivmodsi4>
 8b2:	07 fc       	sbrc	r0, 7
 8b4:	02 d0       	rcall	.+4      	; 0x8ba <__divmodsi4_neg2>
 8b6:	46 f4       	brtc	.+16     	; 0x8c8 <__divmodsi4_exit>
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__negsi2>

000008ba <__divmodsi4_neg2>:
 8ba:	50 95       	com	r21
 8bc:	40 95       	com	r20
 8be:	30 95       	com	r19
 8c0:	21 95       	neg	r18
 8c2:	3f 4f       	sbci	r19, 0xFF	; 255
 8c4:	4f 4f       	sbci	r20, 0xFF	; 255
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255

000008c8 <__divmodsi4_exit>:
 8c8:	08 95       	ret

000008ca <__negsi2>:
 8ca:	90 95       	com	r25
 8cc:	80 95       	com	r24
 8ce:	70 95       	com	r23
 8d0:	61 95       	neg	r22
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__umulhisi3>:
 8da:	a2 9f       	mul	r26, r18
 8dc:	b0 01       	movw	r22, r0
 8de:	b3 9f       	mul	r27, r19
 8e0:	c0 01       	movw	r24, r0
 8e2:	a3 9f       	mul	r26, r19
 8e4:	70 0d       	add	r23, r0
 8e6:	81 1d       	adc	r24, r1
 8e8:	11 24       	eor	r1, r1
 8ea:	91 1d       	adc	r25, r1
 8ec:	b2 9f       	mul	r27, r18
 8ee:	70 0d       	add	r23, r0
 8f0:	81 1d       	adc	r24, r1
 8f2:	11 24       	eor	r1, r1
 8f4:	91 1d       	adc	r25, r1
 8f6:	08 95       	ret

000008f8 <__udivmodsi4>:
 8f8:	a1 e2       	ldi	r26, 0x21	; 33
 8fa:	1a 2e       	mov	r1, r26
 8fc:	aa 1b       	sub	r26, r26
 8fe:	bb 1b       	sub	r27, r27
 900:	fd 01       	movw	r30, r26
 902:	0d c0       	rjmp	.+26     	; 0x91e <__udivmodsi4_ep>

00000904 <__udivmodsi4_loop>:
 904:	aa 1f       	adc	r26, r26
 906:	bb 1f       	adc	r27, r27
 908:	ee 1f       	adc	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	a2 17       	cp	r26, r18
 90e:	b3 07       	cpc	r27, r19
 910:	e4 07       	cpc	r30, r20
 912:	f5 07       	cpc	r31, r21
 914:	20 f0       	brcs	.+8      	; 0x91e <__udivmodsi4_ep>
 916:	a2 1b       	sub	r26, r18
 918:	b3 0b       	sbc	r27, r19
 91a:	e4 0b       	sbc	r30, r20
 91c:	f5 0b       	sbc	r31, r21

0000091e <__udivmodsi4_ep>:
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	1a 94       	dec	r1
 928:	69 f7       	brne	.-38     	; 0x904 <__udivmodsi4_loop>
 92a:	60 95       	com	r22
 92c:	70 95       	com	r23
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	bd 01       	movw	r22, r26
 938:	cf 01       	movw	r24, r30
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
